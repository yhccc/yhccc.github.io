<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yo nací para quererte.</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-27T04:56:14.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yhccc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux</title>
    <link href="http://yoursite.com/2020/01/11/Linux/"/>
    <id>http://yoursite.com/2020/01/11/Linux/</id>
    <published>2020-01-11T00:01:14.000Z</published>
    <updated>2020-10-27T04:56:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>双系统（Windows7+Ubuntu16.04）配置排坑记录</p><a id="more"></a><h5><span id="1-linux安装排坑记录">1. linux安装排坑记录</span></h5><p>UltralSO：镜像写入工具</p><p><font color="red"><strong>空间分配问题</strong></font></p><table><thead><tr><th></th><th align="center">分区</th><th align="center">空间</th></tr></thead><tbody><tr><td>/boot</td><td align="center">主分区</td><td align="center">1000MB</td></tr><tr><td>swap(交换空间)</td><td align="center">逻辑分区</td><td align="center">4000MB</td></tr><tr><td>/</td><td align="center">逻辑分区</td><td align="center">15000MB</td></tr><tr><td>/home</td><td align="center">逻辑分区</td><td align="center">剩余</td></tr></tbody></table><blockquote><p>将/boot所在的设备设置为安装启动引导器的设备</p></blockquote><blockquote><p>删除initramfs-tools时出错（原因是：/boot分配的空间过小导致的——<font color="red">200MB</font>）</p></blockquote><h5><span id="2-opencv编译排坑-测试程序及cmakelists编写">2. OpenCV编译排坑、测试程序及CMakeLists编写</span></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line"></span><br><span class="line">cd path/to/opencv</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>ippicv_windows_20151201.zip压缩包可能无法下载</p><blockquote><p>测试时程序若报错，有可能缺少某依赖库，上网查询</p><p>删除opencv的方法：直接删除解压的文件夹即可</p><p>解压命令：tar -xzvf xxx.tar.gz</p></blockquote><p><strong>CMakeLists</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmake_minimum_required( VERSION 2.8 )</span></span><br><span class="line"><span class="comment"># project( projectname )</span></span><br><span class="line"><span class="comment"># find_packages( , )</span></span><br><span class="line"><span class="comment"># include_directories( )</span></span><br><span class="line"><span class="comment"># add_executable( , )</span></span><br><span class="line"><span class="comment"># target_link_libraries( , )</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>( VERSION <span class="number">2.8</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>( <span class="keyword">test</span>-ceres-solver )</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>( CMAKE_CXX_FLAGS <span class="string">"-std=c++11 -O3"</span> )</span><br><span class="line"><span class="comment"># ceres-solver</span></span><br><span class="line"><span class="keyword">find_package</span>( Ceres REQUIRED )</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;CERES_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"><span class="comment"># opencv</span></span><br><span class="line"><span class="keyword">find_package</span>( OpenCV REQUIRED )</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>( <span class="keyword">test</span>-ceres-solver <span class="keyword">test</span>-ceres-solver.cpp )</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="keyword">test</span>-ceres-solver <span class="variable">$&#123;OpenCV_LIBRARIES&#125;</span> <span class="variable">$&#123;CERES_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure><p><strong>测试程序</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( argc != <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"usage: DisplayImage.out &lt;Image_Path&gt;\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Mat image;</span><br><span class="line">    image = imread( argv[<span class="number">1</span>], <span class="number">1</span> );</span><br><span class="line">    <span class="keyword">if</span> ( !image.data )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"No image data \n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示图片</span></span><br><span class="line">    imshow(<span class="string">"Lena"</span>,image);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示灰度图</span></span><br><span class="line">    Mat Gray;</span><br><span class="line">    cvtColor(image, Gray, <span class="number">6</span>);</span><br><span class="line">    imshow(<span class="string">"Gray"</span>,Gray);</span><br><span class="line">    waitKey(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5><span id="3-chrome使用sock5代理打开的命令">3. Chrome使用sock5代理打开的命令</span></h5><blockquote><p>google-chrome –proxy-server=”socks5://127.0.0.1:1080”</p></blockquote><h5><span id="4-ubuntu换源">4. Ubuntu换源</span></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 备份</span><br><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources_init.list</span><br><span class="line"># 使用gedit打开sources文档, 删除所有内容</span><br><span class="line">sudo gedit /etc/apt/sources.list</span><br><span class="line"># 将阿里源添加进去</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line"># 更新源</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -f install</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;双系统（Windows7+Ubuntu16.04）配置排坑记录&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>函数式编程简介</title>
    <link href="http://yoursite.com/2019/11/17/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2019/11/17/函数式编程简介/</id>
    <published>2019-11-17T11:26:08.000Z</published>
    <updated>2020-10-27T13:09:20.052Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="函数式编程简介"><center>函数式编程简介</center></span></h2>​        大部分函数式编程文章介绍抽象的函数式编程技巧。它们分别是composition, pipelining, higher order functions. 本文与其他文章不同，列举了一些我们日常写的非函数式编程的代码，并将它们转换成遵循函数式编程风格的代码。<p>​        本文第一部分演示将简单的数据转换循环改写成更加函数式的maps和reduces。第二部分演示将更长的循环分成单元，并使每个单元functional。第三部分演示将一个一系列连续的数据转换的循环分解为一个functional pipeline。</p><p>​        因为大多数人认为Python更易读懂，本文的案例代码使用Python编程语言。为了展示函数式编程技术 (map, reduce, pipeline) 能应用于许多其他编程语言，因此大多案例避免Pythonicity。</p><a id="more"></a><h2><span id="准绳a-guide-rope">准绳(A guide rope)</span></h2><p>函数式编程有如下优点：</p><ul><li><p>immutable data</p><p>An immutable piece of data is one that cannot be changed. Some languages, like Clojure, make all values immutable by default. Any “mutating” operations copy the value, change it and pass back the changed copy. This eliminates bugs that arise from a programmer’s incomplete model of the possible states their program may enter.</p></li><li><p>first class functions</p><p>Languages that support first class functions allow functions to be treated like any other value. This means they can be created, passed to functions, returned from functions and stored inside data structures.</p></li><li><p>tail call optimisation</p><p>Tail call optimisation is a programming language feature. Each time a function recurses, a new stack frame is created. A stack frame is used to store the arguments and local values for the current function invocation. If a function recurses a large number of times, it is possible for the interpreter or compiler to run out of memory. Languages with tail call optimisation reuse the same stack frame for their entire sequence of recursive calls. Languages like Python that do not have tail call optimisation generally limit the number of times a function may recurse to some number in the thousands. In the case of the <code>race()</code> function, there are only five time steps, so it is safe.</p></li><li><p>mapping, reducing, pipelining, recursing, currying and the use of higher order functions</p><p>Currying means decomposing a function that takes multiple arguments into a function that takes the first argument and returns a function that takes the next argument, and so forth for all the arguments.</p></li><li><p>parallelization</p><p>Parallelization means running the same code concurrently without synchronization. These concurrent processes are often run on multiple processors.</p></li><li><p>lazy evaluation</p><p>Lazy evaluation is a compiler technique that avoids running code until the result is needed. </p></li><li><p>determinism</p><p>A process is deterministic if repetitions yield the same result every time. </p></li></ul><p>​        忽略上述所有内容，函数式编程唯一特征：没有副作用。即当前执行的函数不依赖于函数外的数据，不会改变函数外数据的值。其他任何“函数式”的性质都可由该性质派生。当你学习时，将其作为一个准绳。</p><p><strong>unfunctional function:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a += <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>functional function:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment2</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="keyword">return</span> a + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2><span id="不要迭代列表使用map和reduce">不要迭代列表，使用map和reduce</span></h2><h3><span id="map映射">Map（映射）</span></h3><p>​        Map接收一个操作函数和一组值(原容器)。它的功能是创建一个新的容器，对原容器中的每一个元素执行传入的函数操作，并将结果插入到新的容器中。返回新的容器。</p><p><strong>如下是一个简单的map实例，传入一个姓名列表，返回一个姓名长度的列表:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name_lengths = (list)(map(len, [<span class="string">"Mary"</span>, <span class="string">"Isla"</span>, <span class="string">"Sam"</span>]))</span><br><span class="line">print(name_lengths)</span><br><span class="line"><span class="comment"># =&gt; [4, 4, 3]</span></span><br></pre></td></tr></table></figure><p><strong>如下map返回每一个输入值的平方:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">squares = (list)(map(<span class="keyword">lambda</span> x: x * x, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]))</span><br><span class="line">print(squares)</span><br><span class="line"><span class="comment"># =&gt; [0, 1, 4, 9, 16]</span></span><br></pre></td></tr></table></figure><p>​        上面的代码使用了lambda表达式定义的匿名内联函数。冒号左侧是lambda表达式的参数，右侧是函数体。运行函数体的结果(隐式)返回。</p><p><strong>下面的unfunctional code接收了一个names的列表，并将它们随机替换成给定的code_names:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'Mary'</span>, <span class="string">'Isla'</span>, <span class="string">'Sam'</span>]</span><br><span class="line">code_names = [<span class="string">'Mr. Pink'</span>, <span class="string">'Mr. Orange'</span>, <span class="string">'Mr. Blonde'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(names)):</span><br><span class="line">    names[i] = random.choice(code_names)</span><br><span class="line"></span><br><span class="line">print(names)</span><br><span class="line"><span class="comment"># =&gt; ['Mr. Orange', 'Mr. Pink', 'Mr. Orange']</span></span><br></pre></td></tr></table></figure><p>​        （如你所见，上面的算法，不同的name可能会有相同的code_name，我们已经改变了names这个列表的值，这将给该加密任务带来混乱）</p><p><strong>上面的代码可以重写为如下的Map:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">names = [<span class="string">'Mary'</span>, <span class="string">'Isla'</span>, <span class="string">'Sam'</span>]</span><br><span class="line">secret_names = (list)(map(<span class="keyword">lambda</span> x: random.choice([<span class="string">'Mr. Pink'</span>, <span class="string">'Mr. Orange'</span>, <span class="string">'Mr. Blonde'</span>]), names))</span><br></pre></td></tr></table></figure><p><strong>Exercise 1.</strong> 尝试将下面代码使用map进行重写。它获取一个name列表，并用使用更鲁棒的策略生成的代码名加密它们。</p><p><strong>unfunctional function:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'Mary'</span>, <span class="string">'Isla'</span>, <span class="string">'Sam'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(names)):</span><br><span class="line">    names[i] = hash(names[i])</span><br><span class="line"></span><br><span class="line">print(names)</span><br><span class="line"><span class="comment"># =&gt;[1709566573, 1950252150, 479690906]</span></span><br></pre></td></tr></table></figure><p><strong>functional function:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'Mary'</span>, <span class="string">'Isla'</span>, <span class="string">'Sam'</span>]</span><br><span class="line">secret_name = (list)(map(hash, names))</span><br><span class="line">print(secret_name)</span><br></pre></td></tr></table></figure><h3><span id="reduce归纳">Reduce（归纳）</span></h3><p>​        Reduce接收一个操作函数和一组值(原容器)。它返回通过操作函数组合原容器中所有项得到的值。</p><p><strong>如下是一个简单的reduce实例，返回容器中所有元素的和:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3中的写法(python把内建函数reduce移除了，放在了functools模块中)</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">sum = reduce(<span class="keyword">lambda</span> a, x: a + x, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>​        lambda表达式中<code>x</code>表示迭代的当前项，<code>a</code>代表累加器(accumulator)，它是在前一项上执行lambda表达式返回的值。<code>reduce()</code>遍历所有元素。当遍历每个元素时，它使用当前的<code>a</code>和<code>x</code>执行lambda表达式并将结果赋给<code>a</code>作为下次迭代的值。</p><p>​        那么第一次迭代时<code>a</code>的值是什么？并没有先前的迭代结果可以传递。<code>reduce()</code>在第一次迭代中为<code>a</code>赋值为容器中的第一项，并从第二项开始迭代。也就是说，第一次迭代中的<code>x</code>是容器中的第二项。</p><p><strong>下面的代码计算了在一个字符串列表中’Sam’出现的次数:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sentences = [<span class="string">'Mary read a story to Sam and Isla.'</span>, </span><br><span class="line">            <span class="string">'Isla cuddled Sam.'</span>,</span><br><span class="line">            <span class="string">'Sam chortled.'</span>]</span><br><span class="line">sam_count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> sentence <span class="keyword">in</span> sentences:</span><br><span class="line">    sam_count += sentence.count(<span class="string">'Sam'</span>)</span><br><span class="line"></span><br><span class="line">print(sam_count)</span><br><span class="line"><span class="comment"># =&gt; 3</span></span><br></pre></td></tr></table></figure><p><strong>使用reduce实现相同的功能:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">sentences = [<span class="string">'Mary read a story to Sam and Isla.'</span>, </span><br><span class="line">            <span class="string">'Isla cuddled Sam.'</span>,</span><br><span class="line">            <span class="string">'Sam chortled.'</span>]</span><br><span class="line">sam_count = reduce(<span class="keyword">lambda</span> a, x: a + x.count(<span class="string">'Sam'</span>), sentences, <span class="number">0</span>)</span><br><span class="line">print(sam_count)</span><br></pre></td></tr></table></figure><p>​        这个代码是如何产生<code>a</code>初始值？’Sam’出现次数的初始值不可能是’Mary read a story to Sam and Isla.’。<code>reduce()</code>的第3个参数指定累加器的初始值，它允许使用和容器中的项不同类型的值。</p><p><strong>为什么使用map和reduce比for循环更好?</strong></p><p>​        首先，它们的代码更简单(one-liners)。</p><p>​        第二，迭代的重要组成部分 — 容器，操作和返回值 — 总是在每个map和reduce中的相同位置。</p><p>​        第三，循环中的代码可能影响在它之前定义的变量或在它之后运行的代码。按照惯例，map和reduce是functional的。</p><p>​        第四，map和reduce是基本操作。每次读for循环时，都必须逐行处理逻辑。几乎没有结构上的规律性可以使用来构建一个脚手架去解释代码的逻辑。相比之下，map和reduce则是可以组合成复杂算法的构建块，使得代码读者可以立即理解并在头脑中抽象的元素。“啊，这段代码正在转换这个容器中的每一项。它扔掉了一些变换。它将剩下的部分合并成一个单独的输出。”</p><p>​        第五，map和reduce有很多朋友，它们提供有用的，调整性的基础行为。例如：filter, all, any, find。</p><p><strong>Exercise 2.</strong> 尝试使用map、reduce和filter重写下面的代码。Filter接收一个接收一个操作函数和一组值(原容器)，它返回一个列表，包含执行操作函数后返回值为<code>True</code>的元素项。</p><p><strong>unfunctional function:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">people = [&#123;<span class="string">'name'</span>: <span class="string">'Mary'</span>, <span class="string">'height'</span>: <span class="number">160</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'Isla'</span>, <span class="string">'height'</span>: <span class="number">80</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'Sam'</span>&#125;]</span><br><span class="line"></span><br><span class="line">height_total = <span class="number">0</span></span><br><span class="line">height_count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> person <span class="keyword">in</span> people:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'height'</span> <span class="keyword">in</span> person:</span><br><span class="line">        height_total += person[<span class="string">'height'</span>]</span><br><span class="line">        height_count += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> height_count &gt; <span class="number">0</span>:</span><br><span class="line">    average_height = height_total / height_count</span><br><span class="line">    print(average_height)</span><br></pre></td></tr></table></figure><p>​        如果这看起来很棘手，请不要考虑对数据的操作。考虑数据要经过的状态，从people字典列表到平均身高。不要尝试将多个转换捆绑在一起。将它们放在单独的行中，并将结果分配给一个具有描述性名称的变量。代码能够运行后，对其进行压缩。</p><p><strong>functional function:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">people = [&#123;<span class="string">'name'</span>: <span class="string">'Mary'</span>, <span class="string">'height'</span>: <span class="number">160</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'Isla'</span>, <span class="string">'height'</span>: <span class="number">80</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'Sam'</span>&#125;]</span><br><span class="line"></span><br><span class="line">filter_people = (list)(filter(<span class="keyword">lambda</span> x: <span class="string">'height'</span> <span class="keyword">in</span> x, people))</span><br><span class="line">average_height = reduce(<span class="keyword">lambda</span> a, x: a + x[<span class="string">'height'</span>] / len(filter_people), filter_people, <span class="number">0</span>)</span><br><span class="line">print(average_height)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 作者的解决方案</span></span><br><span class="line">people = [&#123;<span class="string">'name'</span>: <span class="string">'Mary'</span>, <span class="string">'height'</span>: <span class="number">160</span>&#125;,</span><br><span class="line">          &#123;<span class="string">'name'</span>: <span class="string">'Isla'</span>, <span class="string">'height'</span>: <span class="number">80</span>&#125;,</span><br><span class="line">          &#123;<span class="string">'name'</span>: <span class="string">'Sam'</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出所有height，构成一个列表</span></span><br><span class="line">heights = (list)(map(<span class="keyword">lambda</span> x: x[<span class="string">'height'</span>],</span><br><span class="line">              filter(<span class="keyword">lambda</span> x: <span class="string">'height'</span> <span class="keyword">in</span> x, people)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求平均身高</span></span><br><span class="line"><span class="keyword">if</span> len(heights) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">    <span class="keyword">from</span> operator <span class="keyword">import</span> add</span><br><span class="line">    average_height = reduce(add, heights) / len(heights)</span><br><span class="line">    print(average_height)</span><br></pre></td></tr></table></figure><h2><span id="使用声明式declarative的代码编写而不是命令式imperative">使用声明式(declarative)的代码编写，而不是命令式(imperative)</span></h2><p>​        下面的程序演示三辆车之间进行比赛。在每一个时间步，每辆车可能向前移动或它可能停止。在每个时间步，程序打印出汽车目前的路径。经过五步后，比赛结束。（每个 - 代表前进一步）</p><p><strong>程序如下:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">time = <span class="number">5</span></span><br><span class="line">car_positions = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> time:</span><br><span class="line">    <span class="comment"># decrease time</span></span><br><span class="line">    time -= <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'time'</span> + str(<span class="number">5</span> - time))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(car_positions)):</span><br><span class="line">        <span class="comment"># move car</span></span><br><span class="line">        <span class="keyword">if</span> random() &gt; <span class="number">0.3</span>:</span><br><span class="line">            car_positions[i] += <span class="number">1</span></span><br><span class="line">        <span class="comment"># draw car</span></span><br><span class="line">        print(<span class="string">'- '</span> * car_positions[i])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出示例</span></span><br><span class="line">time1</span><br><span class="line">- </span><br><span class="line">- - </span><br><span class="line">- - </span><br><span class="line">time2</span><br><span class="line">- - </span><br><span class="line">- - </span><br><span class="line">- - - </span><br><span class="line">time3</span><br><span class="line">- - - </span><br><span class="line">- - - </span><br><span class="line">- - - </span><br><span class="line">time4</span><br><span class="line">- - - - </span><br><span class="line">- - - </span><br><span class="line">- - - - </span><br><span class="line">time5</span><br><span class="line">- - - - - </span><br><span class="line">- - - </span><br><span class="line">- - - -</span><br></pre></td></tr></table></figure><p>​        这段代码的编写是命令式的(imperatively)。函数式编程版本应该是声明性的(declarative)。它将描述要做什么，而不是如何做。</p><h3><span id="使用函数use-functions">使用函数(Use functions)</span></h3><p>​        通过将代码片段绑定到函数中，可以使程序更具有声明性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_cars</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i, _ <span class="keyword">in</span> enumerate(car_positions):</span><br><span class="line">        <span class="comment"># move car</span></span><br><span class="line">        <span class="keyword">if</span> random() &gt; <span class="number">0.3</span>:</span><br><span class="line">            car_positions[i] += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_step_of_race</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> time  <span class="comment"># unfunctional</span></span><br><span class="line">    time -= <span class="number">1</span></span><br><span class="line">    move_cars()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_car</span><span class="params">(car_position)</span>:</span></span><br><span class="line">    print(<span class="string">'- '</span> * car_position)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'time'</span> + str(<span class="number">5</span> - time))</span><br><span class="line">    <span class="keyword">for</span> car_position <span class="keyword">in</span> car_positions:</span><br><span class="line">        draw_car(car_position)</span><br><span class="line">        </span><br><span class="line">time = <span class="number">5</span></span><br><span class="line">car_positions = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">while</span> time:</span><br><span class="line">    run_step_of_race()</span><br><span class="line">    draw()</span><br></pre></td></tr></table></figure><p>​        要理解这个程序，读者只需阅读主循环。“如果<code>time &gt; 0</code>，执行<code>run_step_of_race()</code>和<code>draw()</code>。再判断time是否大于0。“如果读者想要了解更多关于<code>run_step_of_race()</code>和<code>draw()</code>的步骤，他们可以阅读这些函数中的代码。</p><p>​        毫无疑问，这段代码描述了它自己。</p><p>​        将代码分解成函数是一种很好的、低脑力的方法，可以使代码更具可读性。函数式编程将函数作子程序使用。从准绳的层面上来讲，上述代码是unfunctional的。代码中的函数没有使用参数传递的方式，它们通过更改外部变量而不是通过返回值来影响其他代码。要检查函数的真正作用，读者必须仔细阅读每一行。如果他们找到一个外部变量，他们必须找到它的原点。他们必须看到是否有其他函数改变了这个变量。</p><h3><span id="归纳状态remove-state">归纳状态(Remove state)</span></h3><p><strong>下面是赛车比赛代码的一个functional的版本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_cars</span><span class="params">(car_positions)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (list)(map(<span class="keyword">lambda</span> x: x + <span class="number">1</span> <span class="keyword">if</span> random()&gt;<span class="number">0.3</span> <span class="keyword">else</span> x, car_positions))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">output_car</span><span class="params">(car_position)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'- '</span> * car_position</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_step_of_race</span><span class="params">(state)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'time'</span>: state[<span class="string">'time'</span>] - <span class="number">1</span>,</span><br><span class="line">            <span class="string">'car_positions'</span>: move_cars(state[<span class="string">'car_positions'</span>])&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(state)</span>:</span></span><br><span class="line">    print(<span class="string">'time'</span> + str(<span class="number">5</span> - state[<span class="string">'time'</span>]))</span><br><span class="line">    <span class="comment"># str.join(sequence): 用于将序列中的元素以指定的字符连接生成一个新的字符串。</span></span><br><span class="line">    print(<span class="string">'\n'</span>.join(map(output_car, state[<span class="string">'car_positions'</span>])))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">race</span><span class="params">(state)</span>:</span></span><br><span class="line">    draw(state)</span><br><span class="line">    <span class="keyword">if</span> state[<span class="string">'time'</span>]:</span><br><span class="line">        race(run_step_of_race(state))</span><br><span class="line">        </span><br><span class="line">race(&#123;<span class="string">'time'</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="string">'car_positions'</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]&#125;)</span><br></pre></td></tr></table></figure><p>​        代码仍然被分为函数，但是函数是functional的。以下三点可以表明：第一，不在有任何共享变量，<code>time</code>和<code>car_positions</code>直接进入<code>race()</code>函数；第二，函数接收参数；第三，函数中不实例化任何变量。所有数据更改都是使用返回值完成的。<code>race()</code>函数使用<code>run_step_of_race()</code>的结果进行递归。每当一个步骤生成一个新的状态，它都会立即被传递到下一个步骤。</p><p><strong>Exercise 3.</strong> 下述的代码使用循环来完成它的工作。通过将其重写为递归，使其更具有声明性。</p><p>现在有两个函数<code>zero()</code>和<code>one()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zero</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">return</span> s[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">'1'</span>:</span><br><span class="line">        <span class="keyword">return</span> s[<span class="number">1</span>:]</span><br></pre></td></tr></table></figure><p>​        <code>zero()</code>接收一个字符串 <code>s</code>。如果其第一个字符是 <code>&#39;0&#39;</code>，它将返回其余的字符串，否则返回 <code>None</code>，Python函数的默认返回值。<code>one()</code> 做同样的事情，但其第一个字符是 <code>&#39;1&#39;</code>。</p><p>​        想象一个名为 <code>rule_sequence()</code>的函数。它接收一个字符串和一个采用 <code>zero()</code> and <code>one()</code>形式的规则函数列表。首先调用第一个规则，除非返回 <code>None</code>， 否则它将接受返回值并对其调用第二个规则。除非返回 <code>None</code>， 否则它将接受返回值并对其调用第三个规则，以此类推。 如果任何规则返回 <code>None</code>，<code>rule_sequence()</code> 终止并返回<code>None</code>。否则，它将返回最终规则的返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># imperative version of rule_sequence():</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rule_sequence</span><span class="params">(s, rules)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> rule <span class="keyword">in</span> rules:</span><br><span class="line">        s = rule(s)</span><br><span class="line">        <span class="keyword">if</span> s == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>下面是一些输入输出举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(rule_sequence(<span class="string">'0101'</span>, [zero, one, zero]))</span><br><span class="line"><span class="comment"># =&gt; 1</span></span><br><span class="line"></span><br><span class="line">print(rule_sequence(<span class="string">'0101'</span>, [zero, zero]))</span><br><span class="line"><span class="comment"># =&gt; None</span></span><br></pre></td></tr></table></figure><p><strong>declarative version:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zero</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">return</span> s[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">'1'</span>:</span><br><span class="line">        <span class="keyword">return</span> s[<span class="number">1</span>:]</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rule_sequence</span><span class="params">(state)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> state[<span class="string">'str'</span>] == <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> state[<span class="string">'rules'</span>]:</span><br><span class="line">        <span class="keyword">return</span> state[<span class="string">'str'</span>]</span><br><span class="line">    <span class="keyword">return</span> rule_sequence(&#123;<span class="string">'str'</span>: state[<span class="string">'rules'</span>][<span class="number">0</span>](state[<span class="string">'str'</span>]), </span><br><span class="line">                          <span class="string">'rules'</span>: state[<span class="string">'rules'</span>][<span class="number">1</span>:]&#125;)</span><br><span class="line">    </span><br><span class="line">print(rule_sequence(&#123;<span class="string">'str'</span>: <span class="string">'0101'</span>, <span class="string">'rules'</span>: [zero, one, zero]&#125;))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 作者的解法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zero</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">return</span> s[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">'1'</span>:</span><br><span class="line">        <span class="keyword">return</span> s[<span class="number">1</span>:]</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rule_sequence</span><span class="params">(s, rules)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> s == <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> rules:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">return</span> rule_sequence(rules[<span class="number">0</span>](s), rules[<span class="number">1</span>:])</span><br><span class="line">    </span><br><span class="line">print(rule_sequence(<span class="string">'0101'</span>, [zero, one, zero]))</span><br><span class="line"><span class="comment"># =&gt; 1</span></span><br><span class="line"></span><br><span class="line">print(rule_sequence(<span class="string">'0101'</span>, [zero, zero]))</span><br><span class="line"><span class="comment"># =&gt; None</span></span><br></pre></td></tr></table></figure><h2><span id="使用pipelines">使用Pipelines</span></h2><p>​        在前一节中，一些命令式循环被重写为调用辅助函数的递归。在本节中，将使用一种称为pipeline的技术重写另一种类型的命令式循环。</p><p><strong>下面的循环对包含乐队名称, 不正确的来源国, 活动状态字段的一个乐队字典执行转换。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bands = [&#123;<span class="string">'name'</span>: <span class="string">'sunset rubdown'</span>, <span class="string">'country'</span>: <span class="string">'UK'</span>, <span class="string">'active'</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">         &#123;<span class="string">'name'</span>: <span class="string">'women'</span>, <span class="string">'country'</span>: <span class="string">'Germany'</span>, <span class="string">'active'</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">         &#123;<span class="string">'name'</span>: <span class="string">'a silver mt. zion'</span>, <span class="string">'country'</span>: <span class="string">'Spain'</span>, <span class="string">'active'</span>: <span class="literal">True</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_bands</span><span class="params">(bands)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> band <span class="keyword">in</span> bands:</span><br><span class="line">        band[<span class="string">'country'</span>] = <span class="string">'Canada'</span></span><br><span class="line">        band[<span class="string">'name'</span>] = band[<span class="string">'name'</span>].replace(<span class="string">'.'</span>, <span class="string">''</span>)</span><br><span class="line">        band[<span class="string">'name'</span>] = band[<span class="string">'name'</span>].title()</span><br><span class="line"></span><br><span class="line">format_bands(bands)</span><br><span class="line">print(bands)</span><br><span class="line"><span class="comment"># =&gt; [&#123;'name': 'Sunset Rubdown', 'country': 'Canada', 'active': False&#125;,</span></span><br><span class="line"><span class="comment">#  &#123;'name': 'Women', 'country': 'Canada', 'active': False&#125;, </span></span><br><span class="line"><span class="comment">#     &#123;'name': 'A Silver Mt Zion', 'country': 'Canada', 'active': True&#125;]</span></span><br></pre></td></tr></table></figure><p>​        担心是由函数的名称引起的。“format”非常模糊。在仔细检查代码之后，这些担忧开始蔓延。在同一个循环中会发生三件事。<code>country</code>键处的值被设置为<code>Canada</code>；从乐队名中删除标点符号；乐队名要大写。很难判断代码的目的是什么，也很难判断它是否做了看起来要做的事情。代码很难重用、测试和并行化。</p><p>将它和下面代码进行比较: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(pipeline_each(bands, [set_canada_as_country,</span><br><span class="line">                            strip_punctuation_from_name,</span><br><span class="line">                            capitalize_names]))</span><br></pre></td></tr></table></figure><p>​        这段代码很容易理解。它给人的印象是，辅助函数是functional的，因为它们似乎是链接在一起的。前一个的输出包含下一个的输入。如果它们是functional的，则很容易验证。它们也很容易重用、测试和并行化。</p><p>​         <code>pipeline_each()</code> 的工作是将乐队列表逐个传递给转换函数，例如 <code>set_canada_as_country()</code>。将转换函数应用于所有乐队之后，<code>pipeline_each()</code>将绑定转换后的乐队列表。然后，它将列表中每一个元素传递给下一个转换函数。</p><p><strong>我们来看看转换函数。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">assoc</span><span class="params">(_d, key, value)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line">    d = deepcopy(_d)</span><br><span class="line">    d[key] = value</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_canada_as_country</span><span class="params">(band)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> assoc(band, <span class="string">'country'</span>, <span class="string">"Canada"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strip_punctuation_from_name</span><span class="params">(band)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> assoc(band, <span class="string">'name'</span>, band[<span class="string">'name'</span>].replace(<span class="string">'.'</span>, <span class="string">''</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">capitalize_names</span><span class="params">(band)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> assoc(band, <span class="string">'name'</span>, band[<span class="string">'name'</span>].title())</span><br></pre></td></tr></table></figure><p>​        每一个转换函数将乐队中的键与一个新值关联起来。不改变原来的乐队做到这一点是很难的。 <code>assoc()</code>通过使用<code>deepcopy()</code> 生成传入字典的深拷贝来解决这个问题。每个转换函数对副本进行修改并返回该副本。</p><p>​        所有事情看起来都很好。当乐队字典的一个键与一个新值相关联时，原始值不会发生突变。但是在上面的代码中还有另外两个潜在的突变。在<code>strip_punctuation_from_name()</code>函数中，去除名称中的标点是对原始名称调用 <code>replace()</code> 实现的。在 <code>capitalize_names()</code>函数中，名称大写是通过对原始名称调用<code>title()</code> 实现的。 如果 <code>replace()</code> 和 <code>title()</code> 函数不是functional的，<code>strip_punctuation_from_name()</code> 和 <code>capitalize_names()</code> 就不是functional的。</p><p>​        幸运的是 <code>replace()</code> 和<code>title()</code> 不改变它们操作的字符串。这是因为字符串在Python中是不可变的。例如，当<code>replace()</code> 操作一个乐队名称的字符串时，原始乐队名称会被复制一份，并对副本调用 <code>replace()</code> 函数。</p><p>​        Python中字符串和字典的可变性之间的不同说明了Clojure等语言的吸引力。程序员不需要考虑他们是否在改变数据。他们没有改变数据。</p><p><strong>Exercise 4.</strong> 尝试编写 <code>pipeline_each</code> 函数。考虑一下操作的顺序。band字典列表一次传一个band字典给第一个转换函数。当全部转换完后，再传入第二个转换函数，以此类推。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pipeline_each</span><span class="params">(data, fns)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> a, x: map(x, a),</span><br><span class="line">                  fns,</span><br><span class="line">                  data)</span><br></pre></td></tr></table></figure><p>所有这三个转换函数都归结为对传入的乐队字典列表上的特定字段进行更改。可以使用<code>call()</code>来抽象它。它需要一个函数和键来应用它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">set_canada_as_country = call(<span class="keyword">lambda</span> x: <span class="string">'Canada'</span>, <span class="string">'country'</span>)</span><br><span class="line">strip_punctuation_from_name = call(<span class="keyword">lambda</span> x: x.replace(<span class="string">'.'</span>, <span class="string">''</span>), <span class="string">'name'</span>)</span><br><span class="line">capitalize_names = call(str.title, <span class="string">'name'</span>)</span><br><span class="line"><span class="comment"># 这三个call返回的函数即下面三个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_canada_as_country</span><span class="params">(band)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> assoc(band, <span class="string">'country'</span>, <span class="string">"Canada"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strip_punctuation_from_name</span><span class="params">(band)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> assoc(band, <span class="string">'name'</span>, band[<span class="string">'name'</span>].replace(<span class="string">'.'</span>, <span class="string">''</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">capitalize_names</span><span class="params">(band)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> assoc(band, <span class="string">'name'</span>, band[<span class="string">'name'</span>].title())</span><br><span class="line"></span><br><span class="line">print(pipeline_each(bands, [set_canada_as_country,</span><br><span class="line">                            strip_punctuation_from_name,</span><br><span class="line">                            capitalize_names]))</span><br></pre></td></tr></table></figure><p>或者，如果我们愿意为了简洁而牺牲可读性，只要:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(pipeline_each(bands, [call(<span class="keyword">lambda</span> x: <span class="string">'Canada'</span>, <span class="string">'country'</span>),</span><br><span class="line">                            call(<span class="keyword">lambda</span> x: x.replace(<span class="string">'.'</span>, <span class="string">''</span>), <span class="string">'name'</span>),</span><br><span class="line">                            call(str.title, <span class="string">'name'</span>)]))</span><br></pre></td></tr></table></figure><p> <code>call()</code>函数的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">assoc</span><span class="params">(_d, key, value)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line">    d = deepcopy(_d)</span><br><span class="line">    d[key] = value</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(fn, key)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply_fn</span><span class="params">(record)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> assoc(record, key, fn(record.get(key)))</span><br><span class="line">    <span class="keyword">return</span> apply_fn</span><br></pre></td></tr></table></figure><p><strong>这里发生了很多事情。让我们一块一块来。</strong></p><p>​        第一， <code>call()</code> 是一个高阶函数。一个高阶函数接收一个函数作为参数，或者返回一个函数。<code>call()</code>既接收一个函数作为参数，又返回一个函数。</p><p>​        第二， <code>apply_fn()</code> 看起来很像之前的三个转换函数，它接收一个<code>record(一个band字典)</code>作为参数。它在 <code>record[key]</code>处查找值，然后调用 <code>fn</code>对获得的值进行操作， 它将结果赋给<code>record</code>的副本，并返回副本。</p><p>​        第三，<code>call()</code> 不做任何实际的工作。当调用<code>call()</code>， <code>apply_fn()</code>会执行。在上面使用 <code>pipeline_each()</code> 的示例中， <code>apply_fn()</code> 的一个实例将输入的一个band字典的 <code>&#39;country&#39;</code> 键对应的值设置为 <code>&#39;Canada&#39;</code> 。另一个实例将输入的band字典的名称值首字母大写。</p><p>​        第四，当 <code>apply_fn()</code> 的实例运行时， <code>fn</code> 和 <code>key</code>不在代码块中。它们既不是<code>apply_fn()</code>的参数，也不是它的内部变量，但它们仍然是可以访问的。当一个函数被定义时，它保存对它关闭的变量的引用：那些在函数外部定义的并在函数内部使用的变量。当函数运行并且它的代码引用一个变量时，Python会在局部变量和参数中查找该变量。如果没有找到，它会在保存的引用中查找封闭的变量。这就是找到 <code>fn</code> 和 <code>key</code>的地方。</p><p>​        第五， <code>call()</code> 函数中没有提到<code>bands</code>。这是因为 <code>call()</code> 可以用于为任何程序生成管道函数，无论什么主题。函数式编程在一定程度上是关于构建一个通用的、可重用的、可组合的函数库。</p><p>​        这一段解释了闭包、高阶函数和变量作用域。</p><hr><p><strong>还有一个处理要做，就是剔除除名字和国家外其他所有的字段。<code>extract_name_and_country()</code> 可以提取这些信息:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_name_and_country</span><span class="params">(band)</span>:</span></span><br><span class="line">    plucked_band = &#123;&#125;</span><br><span class="line">    plucked_band[<span class="string">'name'</span>] = band[<span class="string">'name'</span>]</span><br><span class="line">    plucked_band[<span class="string">'country'</span>] = band[<span class="string">'country'</span>]</span><br><span class="line">    <span class="keyword">return</span> plucked_band</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> pipeline_each(bands, [call(<span class="keyword">lambda</span> x: <span class="string">'Canada'</span>, <span class="string">'country'</span>),</span><br><span class="line">                            call(<span class="keyword">lambda</span> x: x.replace(<span class="string">'.'</span>, <span class="string">''</span>), <span class="string">'name'</span>),</span><br><span class="line">                            call(str.title, <span class="string">'name'</span>),</span><br><span class="line">                            extract_name_and_country])</span><br><span class="line"></span><br><span class="line"><span class="comment"># =&gt; [&#123;'name': 'Sunset Rubdown', 'country': 'Canada'&#125;,</span></span><br><span class="line"><span class="comment">#     &#123;'name': 'Women', 'country': 'Canada'&#125;,</span></span><br><span class="line"><span class="comment">#     &#123;'name': 'A Silver Mt Zion', 'country': 'Canada'&#125;]</span></span><br></pre></td></tr></table></figure><p><code>extract_name_and_country()</code> 可以写成一个名为<code>pluck()</code>的通用函数。</p><p><strong><code>pluck()</code> 可以像如下这种方式使用:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> pipeline_each(bands, [call(<span class="keyword">lambda</span> x: <span class="string">'Canada'</span>, <span class="string">'country'</span>),</span><br><span class="line">                            call(<span class="keyword">lambda</span> x: x.replace(<span class="string">'.'</span>, <span class="string">''</span>), <span class="string">'name'</span>),</span><br><span class="line">                            call(str.title, <span class="string">'name'</span>),</span><br><span class="line">                            pluck([<span class="string">'name'</span>, <span class="string">'country'</span>])])</span><br></pre></td></tr></table></figure><p><strong>Exercise 5.</strong> <code>pluck()</code> 接收一个需要从<code>record</code>中提取的键的列表。试着写下来。它需要是一个高阶函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pluck</span><span class="params">(keys)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pluck_fn</span><span class="params">(record)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> a,x: assoc(a, x, record[x]), keys, &#123;&#125;)</span><br><span class="line">    <span class="keyword">return</span> pluck_fn</span><br></pre></td></tr></table></figure><p><strong>最终版本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">assoc</span><span class="params">(_d, key, value)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line">    d = deepcopy(_d)</span><br><span class="line">    d[key] = value</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(fn, key)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply_fn</span><span class="params">(record)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> assoc(record, key, fn(record.get(key)))</span><br><span class="line">    <span class="keyword">return</span> apply_fn</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pluck</span><span class="params">(keys)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pluck_fn</span><span class="params">(record)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> a,x: assoc(a, x, record[x]), keys, &#123;&#125;)</span><br><span class="line">    <span class="keyword">return</span> pluck_fn</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pipeline_each</span><span class="params">(data, fns)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> a, x: map(x, a),</span><br><span class="line">                  fns,</span><br><span class="line">                  data)</span><br><span class="line"></span><br><span class="line">bands = [&#123;<span class="string">'name'</span>: <span class="string">'sunset rubdown'</span>, <span class="string">'country'</span>: <span class="string">'UK'</span>, <span class="string">'active'</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">         &#123;<span class="string">'name'</span>: <span class="string">'women'</span>, <span class="string">'country'</span>: <span class="string">'Germany'</span>, <span class="string">'active'</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">         &#123;<span class="string">'name'</span>: <span class="string">'a silver mt. zion'</span>, <span class="string">'country'</span>: <span class="string">'Spain'</span>, <span class="string">'active'</span>: <span class="literal">True</span>&#125;]</span><br><span class="line"></span><br><span class="line">print((list)(pipeline_each(bands, [call(<span class="keyword">lambda</span> x: <span class="string">'Canada'</span>, <span class="string">'country'</span>),</span><br><span class="line">                            call(<span class="keyword">lambda</span> x: x.replace(<span class="string">'.'</span>, <span class="string">''</span>), <span class="string">'name'</span>),</span><br><span class="line">                            call(str.title, <span class="string">'name'</span>),</span><br><span class="line">                            pluck([<span class="string">'name'</span>, <span class="string">'country'</span>])])))</span><br></pre></td></tr></table></figure><h2><span id="现在该做什么what-now">现在该做什么？(What now?)</span></h2><p>functional代码与以其他风格编写的代码能很好地共存。本文中的转换可以应用于任何语言编写的任何代码。尝试将它们应用到您自己的代码中。</p><p>想想Mary, Isla and Sam。将列表的迭代转换为map和reduce。</p><p>想想car race。把代码分解成函数，让这些功能发挥作用，将重复过程的循环转换为递归。</p><p>想想bands。将一系列操作转换为pipeline。</p><center>最后附<a href="https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming" target="_blank" rel="noopener">原文链接</a><center></center></center>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;&lt;center&gt;函数式编程简介&lt;/center&gt;&lt;/h2&gt;
​        大部分函数式编程文章介绍抽象的函数式编程技巧。它们分别是composition, pipelining, higher order functions. 本文与其他文章不同，列举了一些我们日常写的非函数式编程的代码，并将它们转换成遵循函数式编程风格的代码。

&lt;p&gt;​        本文第一部分演示将简单的数据转换循环改写成更加函数式的maps和reduces。第二部分演示将更长的循环分成单元，并使每个单元functional。第三部分演示将一个一系列连续的数据转换的循环分解为一个functional pipeline。&lt;/p&gt;
&lt;p&gt;​        因为大多数人认为Python更易读懂，本文的案例代码使用Python编程语言。为了展示函数式编程技术 (map, reduce, pipeline) 能应用于许多其他编程语言，因此大多案例避免Pythonicity。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>热更新</title>
    <link href="http://yoursite.com/2019/10/18/%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/2019/10/18/热更新/</id>
    <published>2019-10-18T11:19:19.000Z</published>
    <updated>2020-10-27T13:07:39.241Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="一-游戏更新与热更新概念及方式">一、游戏更新与热更新概念及方式</span></h2><h4><span id="1-游戏数据更新方案">1、游戏数据更新方案</span></h4><blockquote><p><strong>（1）状态同步-&gt;MMOG（MassiveMultiplayer Online Game）模式（网络延迟&lt;100ms）</strong></p></blockquote><p>端游时代使用非常广泛，特别是MMORPG里面。</p><a id="more"></a><p>实现要点：<font color="red">服务器计算全部的游戏逻辑，并广播计算结果，客户端仅负责发送玩家的操作，以及表现收到的游戏结果。</font>一般来说，玩家发送一个操作到服务器上，服务器根据玩家操作去修改内存中的游戏世界模型，同事运算游戏世界对这个操作的反应，然后把这些反应都广播给相关的多个客户端，每个客户端负责把这些数据表现出来给玩家看。</p><p>优点：<font color="red">安全，由于整个游戏逻辑都在服务器上，游戏的逻辑更新很方便（能方便地做反外挂）。</font>一般的游戏玩法需要更新，游戏开发团队自己更新重启服务器就可以了，无需让千万个手机去下载更新包。</p><p>缺点：<font color="red">首先是用户的体验非常依赖网络质量（流量占用多）。</font>如果一个用户的网速慢，其他玩家都会发现他在游戏中明显的变卡。<font color="red">另一个缺点是服务器负责了太多的游戏逻辑运算（服务器负载高）。</font>在动作游戏里，服务器往往需要针对二维或者三维空间进行运算。<font color="red">最后一个缺点是使用这种同步方案，</font>由于每个游戏表现都要以数据包发往客户端，所以当一起玩的用户数量较多，这种<font color="red">广播的数据包量就会非常大。</font></p><p>应用场景：同局游戏人数不太多，但讲求玩法变化快和安全性高的游戏中采用。</p><blockquote><p><strong>（2）主机模式（网络延迟&lt;400ms）</strong></p></blockquote><p>实现要点：<font color="red">以参与对战的一个客户端为“主机”，其他的客户端为“副机”。</font>游戏逻辑的主要运算由“主机”完成，所有的“副机”把操作指令，通过服务器中转，集中发送给“主机”；“主机”完成游戏运算后，把结果指令再通过服务器中转，广播给所有的“副机”。</p><p>优点：首先是大量的实时动作游戏，<font color="red">其游戏过程的逻辑代码，都是在客户端上开发和运行的。客户端的游戏引擎对于二维、三维空间中的位置运算、碰撞检测等功能，都有很好的支持。</font>因此把整个游戏逻辑由客户端负责，就能让服务器无需再开发这部分功能。<font color="red">服务器只负责做转发、广播的操作，所以能承载的人数和第一种方案有数量级上的差别（服务器负载低）。</font>由于“主机”客户端运行游戏逻辑，所以其体验是最好的，就算“副机”由于网络不佳造成体验下降，对于“主机”来说，只是发现“副机”动作有点迟缓而已。</p><p>缺点：<font color="red">游戏过程的逻辑代码，都是在客户端上开发和运行的。（安全性较差）比较容易通过修改客户端作假。</font></p><p>应用场景：在以PVE玩法为主的游戏中，用户关注的是自己的体验，不会太在意同伴的准确动作，这种情况下，主机模式就是一种不错的同步方案。</p><blockquote><p><strong>（3）帧同步模式（囚犯模式）（网络延迟&lt;50ms）</strong></p></blockquote><p>把所有参与对战的客户端，看成是排成一列的囚犯。这些囚犯们的左脚都被链子锁在一起，因此他们如果要往前走，就只能同时迈步，如果其中某个人走快了，或者走慢了，都会让整队人停下来。</p><p>实现要点：<font color="red">以服务器按固定的帧率，来搜集每个客户端的输入，然后把这些输入广播给所有的客户端</font>：由于每个操作指令到达所有客户端的时间（帧）都是一样的，所以每个客户端运算的结果也是一样的，同样的输入就会得到同样的结果。</p><p>优点：<font color="red">强一致性。</font>每个客户端的表现是完全一样的，非常适合高度要求操作技巧的游戏。<font color="red">由于广播的仅是玩家的操作，所以数据量很少（流量很小，服务器负载低）。</font>不管游戏中的角色数、状态量有多大、多复杂，都不会影响广播的数据量。</p><p>缺点：<font color="red">对所有玩家的延迟都有要求，一般来说要求在50ms以内。</font>如果有一个客户端网络卡了，所有的客户端都要停下来等。<font color="red">游戏逻辑主要依赖客户端（游戏安全性差）。</font>另外在帧同步模式中，数据同步的频率较高，网络延迟越小越好。由于TCP的滑动窗口机制和重传机制，导致延时无法控制，因此帧同步一般采用UDP进行网络传输，但UDP又会衍生出可靠性问题，对于客户端，如果某些UDP包没有收到，就会出现丢帧的情况。</p><p>应用场景：传统单机-局域网游戏中最常用。</p><h4><span id="2-游戏安全">2、游戏安全</span></h4><p>（1）服务器驱动：客户端上传所有的游戏操作，所有的游戏逻辑都在服务器中计算。</p><p>（2）MonoSvr抽查回放：客户端上传所有的游戏操作，服务器仅对容易被外挂攻击的部分进行验证。</p><p>（3）柔性反外挂：在服务器上保留了一批预设的校验规则。这些规则可能是核算玩家的收益和付出是否合理、一些重点操作是否符合规则。</p><p>（4）举报系统：人民战争，让玩家发起举报请求。</p><h4><span id="3-游戏更新概述">3、游戏更新概述</span></h4><ul><li><p>版本更新问题</p><p>（1）手机内存小，更新的过程较容易崩溃。</p><p>（2）移动设备的网络环境很不稳定。经常下载到一半，用户走出了wifi范围或者走进了电梯，网络中断了。</p><p>（3）应用商店的版本审核。什么时候能审核通过往往不能预测，对于紧急的BUG来说更是远水救不了近火。</p></li><li><p>热更新（在不重新下载客户端的情况下，更新游戏的内容）</p><p>热更新是对hot update或者hot fix的翻译，表示在不停机的前提下对系统进行更改。</p><p>把程序代码，以脚本来编写，然后使用一个优秀的脚本解析器来运行，就能让程序代码以文本资源的形式，和图片、声音等其他游戏资源一样更新下载了。</p></li></ul><h4><span id="4-资源热更新方案与代码热更新方案">4、资源热更新方案与代码热更新方案</span></h4><ul><li>资源热更新方案：AssetBundle热更新</li><li>代码热更新方案：Lua热更新</li></ul><h2><span id="二-lua基础">二、Lua基础</span></h2><h4><span id="1-如何学习热更新技术">1、如何学习热更新技术</span></h4><ul><li>学习Lua编程</li><li>学习通过LuaInterface和Luanet进行Lua和C#的交互通信</li><li>学习使用AssetBundle进行资源更新</li><li>学习uLua SimpleFramework</li><li>学习uLua热更新的相关案例</li></ul><h4><span id="2-lua简介">2、Lua简介</span></h4><p>小巧的脚本语言，设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。Lua由标准C编写而成，几乎在所有操作系统和平台上都可以编译运行。</p><p><a href="http://www.lua.org/" target="_blank" rel="noopener">Lua官网</a>    <a href="http://ulua.org/index.html" target="_blank" rel="noopener">uLua官网</a>    <a href="https://www.luacn.net/" target="_blank" rel="noopener">Lua脚本交流论坛</a>    <a href="https://www.runoob.com/lua/lua-tutorial.html" target="_blank" rel="noopener">Lua菜鸟教程</a>    <a href="https://code.google.com/archive/p/luaforwindows/" target="_blank" rel="noopener">LuaForWindows集成安装程序(需翻墙)</a></p><p><a href="https://github.com/rjpcomputing/luaforwindows" target="_blank" rel="noopener">LuaForWindows的github地址</a></p><h4><span id="3-代码在projectlua文件中">3、代码（在Project/Lua文件中）</span></h4><h5><span id="1注释与关键字">1）注释与关键字</span></h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 单行注释：--</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多行注释：--[[这里是注释内容]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 标识符：字母或下划线开头的字母，下划线，数字序列。最好不要用大写字母的标识符开头。注意：Lua是大小写敏感的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关键字：and, break, do, else, elseif, end, false, for, function, if, in, local, nil, not, or, repeat, return, then, true, until, while</span></span><br></pre></td></tr></table></figure><h5><span id="2定义变量">2）定义变量</span></h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span> <span class="comment">-- 这里定义了一个全局变量叫做num赋值为10</span></span><br><span class="line"><span class="comment">-- 在Lua中定义变量是没有类型的，根据存储什么数据，来决定是什么类型</span></span><br><span class="line"><span class="comment">-- 推荐使用C#中的命名规范和驼峰命名</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 变量类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- nil 空数据, 全局变量未赋值前都是nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- boolean 布尔类型, 在Lua控制结构中除了false和nil为假, 其他值都为真。所以lua中, 0和空字符串均为真</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Lua会在string和number之间自动进行类型转换, 当一个字符串使用算数操作时, string就会被转成数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- string 字符串类型, 使用 .. (注意连接两个数字时要有空格, 否则报错)连接字符串相当于+, tostring()将其他类型转换成string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- number 小数类型（Lua中没有整数类型）, tonumber()将其他类型转换成数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- table 表类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- function 函数类型, Lua可以调用Lua或者C实现的函数, Lua所有标准库都是用C实现。</span></span><br><span class="line"><span class="comment">-- 标准库包括string库, tabel库, io库, os库, math库, debug库……</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- userdata 用来描述应用程序或者使用C实现的库创建新的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用type()获得一个变量的类型</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 局部变量和全局变量</span></span><br><span class="line"><span class="comment">-- 默认定义的变量都是全局的</span></span><br><span class="line"><span class="comment">-- 定义局部变量需要在前面加一个local</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表的构造</span></span><br><span class="line">    days = &#123;<span class="string">'Sun'</span>, <span class="string">'Mon'</span>, <span class="string">'Tue'</span>, <span class="string">'Wed'</span>, <span class="string">'Thu'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>&#125;</span><br><span class="line">    <span class="comment">-- 计数从1开始</span></span><br><span class="line">    <span class="built_in">print</span>(days[<span class="number">4</span>]) <span class="comment">-- Wed</span></span><br><span class="line"></span><br><span class="line">    a = &#123;&#125;</span><br><span class="line">    a.x = <span class="number">0</span></span><br><span class="line">    a[<span class="string">'y'</span>] = <span class="number">1</span> <span class="comment">-- 等价于 a.y = 1</span></span><br><span class="line">    <span class="built_in">print</span>(a[<span class="string">'x'</span>]) <span class="comment">-- 0</span></span><br><span class="line">    <span class="built_in">print</span>(a.y) <span class="comment">-- 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 表的嵌套</span></span><br><span class="line">    polyline = &#123;</span><br><span class="line">        color = <span class="string">'blue'</span>,</span><br><span class="line">        thickness = <span class="number">2</span>,</span><br><span class="line">        npoint = <span class="number">4</span>,</span><br><span class="line">        &#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;x = <span class="number">1</span>, y = <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;x = <span class="number">2</span>, y = <span class="number">2</span>&#125;,</span><br><span class="line">        &#123;x = <span class="number">3</span>, y = <span class="number">3</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(polyline[<span class="number">4</span>].y) <span class="comment">-- 3</span></span><br><span class="line">    <span class="built_in">print</span>(polyline[<span class="string">'color'</span>]) <span class="comment">-- blue</span></span><br><span class="line">    <span class="built_in">print</span>(polyline.npoint) <span class="comment">-- 4</span></span><br></pre></td></tr></table></figure><h5><span id="3转义字符">3）转义字符</span></h5><table><thead><tr><th align="center">转义字符</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">\a</td><td align="center">响铃(BEL)</td></tr><tr><td align="center">\b</td><td align="center">退格(BS) ，将当前位置移到前一列</td></tr><tr><td align="center">\f</td><td align="center">换页(FF)，将当前位置移到下页开头</td></tr><tr><td align="center">\n</td><td align="center">换行(LF) ，将当前位置移到下一行开头</td></tr><tr><td align="center">\r</td><td align="center">回车(CR) ，将当前位置移到本行开头</td></tr><tr><td align="center">\t</td><td align="center">水平制表(HT) （跳到下一个TAB位置）</td></tr><tr><td align="center">\v</td><td align="center">垂直制表(VT)</td></tr><tr><td align="center">\</td><td align="center">代表一个反斜线字符”\“</td></tr><tr><td align="center">\‘</td><td align="center">代表一个单引号（撇号）字符</td></tr><tr><td align="center">\“</td><td align="center">代表一个双引号字符</td></tr></tbody></table><h5><span id="4表达式与运算符">4）表达式与运算符</span></h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 算术运算符 + - * / % ^(Lua中没有++ --这样的运算符)</span></span><br><span class="line"><span class="comment">-- 关系运算符 &lt;=小于等于 &lt;小于 &gt;大于 &gt;=大于等于 ==等于 ~=不等于</span></span><br><span class="line"><span class="comment">-- 逻辑运算符 and or not 与或非</span></span><br><span class="line">a <span class="keyword">and</span> b 如果a为<span class="literal">false</span>, 则返回a, 否则返回b</span><br><span class="line">a <span class="keyword">or</span> b  如果a为<span class="literal">true</span>, 则返回a, 否则返回b</span><br><span class="line">三元运算符 (a <span class="keyword">and</span> b) <span class="keyword">or</span> c =&gt;相当于a?b:c</span><br><span class="line"><span class="comment">-- 其他运算符</span></span><br><span class="line"><span class="comment">-- .. 连接两个字符串</span></span><br><span class="line"><span class="comment">-- # 一元运算符, 返回字符串或表的长度#"Hello" 返回 5</span></span><br></pre></td></tr></table></figure><h5><span id="5运算符优先级从高到低">5）运算符优先级（从高到低）：</span></h5><p>除了 <code>^</code>和<code>..</code>外所有的二元运算符都是左连接的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">^</span><br><span class="line">not    - (一元运算符, 负)</span><br><span class="line">*      /</span><br><span class="line">+      -</span><br><span class="line">..</span><br><span class="line">&lt;      &gt;      &lt;=     &gt;=     ~=     ==</span><br><span class="line">and</span><br><span class="line">or</span><br></pre></td></tr></table></figure><h5><span id="6赋值语句">6）赋值语句</span></h5><p>赋值（类似于python的写法）是改变一个变量的值和改变表域的最基本的方法。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'Hello'</span>..<span class="string">'World'</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">-- HelloWorld</span></span><br><span class="line"></span><br><span class="line">a, b = <span class="number">10</span>, <span class="number">2</span></span><br><span class="line"><span class="comment">-- a, b = b, a 交换语句</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">-- 10</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">-- 2</span></span><br><span class="line"></span><br><span class="line">a, b, c = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c) <span class="comment">-- 0 1nil</span></span><br><span class="line"></span><br><span class="line">a, b = a+<span class="number">1</span>, b+<span class="number">1</span>, b+<span class="number">2</span> <span class="comment">-- b+2被忽略</span></span><br><span class="line"><span class="built_in">print</span>(a, b) <span class="comment">-- 12</span></span><br></pre></td></tr></table></figure><h5><span id="7局部变量和代码块">7）局部变量和代码块</span></h5><p>使用local创建一个局部变量，局部变量只在被声明的那个代码块有效，代码块：指一个控制结构内，一个函数体，或者一个chunk（变量被声明的那个文件或者文本串）。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 局部变量与代码块</span></span><br><span class="line"><span class="comment">-- 在代码块中应该尽可能使用局部变量</span></span><br><span class="line"><span class="comment">-- 避免命名冲突, 访问局部变量的速度比全局变量快</span></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">local</span> i = <span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt;= x <span class="keyword">do</span> <span class="comment">-- 此处x为全局变量</span></span><br><span class="line">    <span class="keyword">local</span> x = i * <span class="number">2</span> <span class="comment">-- 局部覆盖全局</span></span><br><span class="line">    <span class="built_in">print</span>(x) <span class="comment">-- 2 4 6 8 10 12 14 16 18 20</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">20</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> x</span><br><span class="line">    x = <span class="number">20</span> <span class="comment">-- 局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(x+<span class="number">2</span>) <span class="comment">-- 22</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(x) <span class="comment">-- 10 全局变量</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> a, b, c = <span class="number">1</span>, <span class="number">-3</span>, <span class="number">2</span> <span class="comment">-- 局部</span></span><br><span class="line">    <span class="keyword">local</span> d = <span class="built_in">math</span>.<span class="built_in">sqrt</span>( b^<span class="number">2</span> - <span class="number">4</span>*a*c )</span><br><span class="line">    x1 = (-b + d) / (<span class="number">2</span> * a) <span class="comment">-- 全局</span></span><br><span class="line">    x2 = (-b - d) / (<span class="number">2</span> * a)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(x1, x2) <span class="comment">-- 2, 1</span></span><br></pre></td></tr></table></figure><h5><span id="8流程控制if语句">8）流程控制if语句</span></h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> conditions <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">then</span>-part</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> conditions <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">then</span>-part</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">else</span>-part</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> conditions <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">then</span>-part</span><br><span class="line"><span class="keyword">elseif</span> conditions <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">elseif</span>-part</span><br><span class="line">..  -&gt;  多个<span class="keyword">elseif</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">else</span>-part</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5><span id="9循环结构">9）循环结构</span></h5><p>break可以终止循环    没有continue语法</p><p><strong>while循环</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [condition] <span class="keyword">do</span></span><br><span class="line">    something</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>repeat循环</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    something</span><br><span class="line"><span class="keyword">until</span> [condition]</span><br><span class="line"><span class="comment">-- 相当于do-while</span></span><br></pre></td></tr></table></figure><p><strong>for循环</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- [start, end]闭区间step可以为负, 即倒序</span></span><br><span class="line"><span class="keyword">for</span> index = [start],[<span class="keyword">end</span>],[step(optional)] <span class="keyword">do</span></span><br><span class="line">something</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>泛型for循环</strong></p><p>泛型for通过一个迭代器函数来实现遍历</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- for循环遍历table, 每次获取key存到k中, 获取到的value存到v中</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(<span class="built_in">table</span>) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这里pairs就是一个迭代器函数，其他的迭代器函数还有</p><ul><li>io.lines可用于迭代文件中的行</li><li>ipairs可用于迭代table的数组部分</li></ul><h5><span id="10函数方法">10）函数（方法）</span></h5><p>用途: 1.完成指定的任务，这种情况下函数作为调用语句使用。</p><p>2.计算并返回值，这种情况下函数作为赋值语句的表达式使用。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 函数的定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> [<span class="title">function</span> <span class="title">name</span>]<span class="params">(param1, param2)</span></span></span><br><span class="line">    [<span class="function"><span class="keyword">function</span> <span class="title">code</span>]</span></span><br><span class="line"><span class="function"><span class="title">end</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">-- 求两值最大值</span></span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">max</span> <span class="params">(num1, num2)</span></span></span><br><span class="line">    <span class="comment">-- 三元运算符</span></span><br><span class="line">    <span class="keyword">return</span> ((num1 &gt; num2) <span class="keyword">and</span> num1) <span class="keyword">or</span> num2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 匿名函数</span></span><br><span class="line">myPrint = <span class="function"><span class="keyword">function</span><span class="params">(param)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'打印函数:'</span> .. param)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">myPrint(<span class="string">'HelloWorld'</span>) <span class="comment">-- 打印函数:HelloWorld</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 函数作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(num1, num2, functionPrint)</span></span></span><br><span class="line">    functionPrint(num1+num2)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">add(<span class="number">20</span>,<span class="number">30</span>,myPrint) <span class="comment">-- 打印函数:50</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">-- 多返回值函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxinum</span><span class="params">(a)</span></span></span><br><span class="line">    <span class="keyword">local</span> mi = <span class="number">1</span></span><br><span class="line">    <span class="keyword">local</span> m = a[mi]</span><br><span class="line">    <span class="keyword">for</span> i, val <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> val &gt; m <span class="keyword">then</span></span><br><span class="line">            mi = i</span><br><span class="line">            m = val</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> mi, m</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(maxinum(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">4</span>&#125;)) <span class="comment">-- 3  5</span></span><br></pre></td></tr></table></figure><p><strong>函数中的ipairs或pairs</strong><br>table的遍历通过ipairs或pairs来完成</p><ul><li>ipairs只遍历索引为数字的key-value对, 从下标1开始递增</li><li>pairs会无序遍历table中所有元素, 当一个table是一个纯数组, 那么两者遍历的结果是一样的</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Lua中函数可以接受可变数目的参数, ...代表可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">average</span><span class="params">(...)</span></span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">local</span> <span class="built_in">arg</span> = &#123;...&#125; <span class="comment">-- 将函数的参数放在一个叫arg的表中</span></span><br><span class="line">    <span class="keyword">for</span> index, val <span class="keyword">in</span> <span class="built_in">ipairs</span>(<span class="built_in">arg</span>) <span class="keyword">do</span></span><br><span class="line">        result = result + val</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'一共传入'</span> .. #<span class="built_in">arg</span> .. <span class="string">'个参数'</span>) <span class="comment">-- #arg代表列表中的元素个数</span></span><br><span class="line">    <span class="keyword">return</span> result / #<span class="built_in">arg</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(average(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>))</span><br></pre></td></tr></table></figure><h5><span id="11goto跳转语句">11）goto跳转语句</span></h5><p>goto语句可以让执行跳转到特定的标签（label）处</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">goto</span> quit</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'come on'</span>) <span class="comment">-- 不执行</span></span><br><span class="line">::quit::</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'quit'</span>)</span><br><span class="line"><span class="comment">-- 结果为quit</span></span><br></pre></td></tr></table></figure><p>label写法为    ::name::</p><ul><li>不允许跳转到一个块中去</li><li>不允许跳转到函数之外去</li><li>不允许跳入局部变量的作用域中</li></ul><h4><span id="4-vs搭建lua开发环境c">4、VS搭建Lua开发环境（C++）</span></h4><p>其他可用开发环境：LuaForWindows、LuaStudio</p><p>参考LuaCCPP项目（1-4参考LuaVS工程    5-9参考LuaTest工程）</p><ol><li><p>新建一个C++控制台工程，选择静态库，取消预编译头的勾选</p><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/1.png" alt></p></li><li><p>在Lua官网下载Lua源码，在VS工程中选择添加现有项头文件添加Lua源码src中的头文件，源文件添加src中的源文件</p></li><li><p>右键工程-&gt;属性-&gt;配置属性-&gt;C/C++-&gt;常规-&gt;将src文件夹添加到附加包含目录</p><p>​                                                            -&gt;高级-&gt;编译为：编译为C代码（/TC）</p><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/2.png" alt></p><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/3.png" alt></p></li><li><p>右键工程重新生成，在工程的Debug目录下可获得.lib文件（建议复制到src文件夹中）</p><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/4.png" alt></p></li><li><p>新建一个工程，测试Lua环境</p></li><li><p>右键工程-&gt;属性-&gt;配置属性-&gt;C/C++-&gt;常规-&gt;将包含上述.lib文件的文件夹添加到附加包含目录</p><p>​                                                链接器-&gt;常规-&gt;将包含上述.lib文件的文件夹添加到附加库目录</p><p>​                                                            -&gt;输入-&gt;将.lib文件添加到附加依赖性中</p><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/6.png" alt></p><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/7.png" alt></p><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/8.png" alt></p></li><li><p>在源文件中写一个Lua脚本</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- HelloWorld.lua</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"HelloWorld!"</span>);</span><br></pre></td></tr></table></figure></li><li><p>将Main函数改成如下，即可运行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LuaTest.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;lua.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 脚本上下文，包括当前脚本环境运行的状态信息</span></span><br><span class="line">lua_State* l = luaL_newstate();</span><br><span class="line">    <span class="comment">// 把所有标准类库加载到指定的虚拟机</span></span><br><span class="line">luaL_openlibs(l);</span><br><span class="line">    <span class="comment">// C++调用Lua文件时要加载Lua文件，加载Lua文件的函数</span></span><br><span class="line">luaL_dofile(l, <span class="string">"HelloWorld.lua"</span>);</span><br><span class="line">lua_close(l);<span class="comment">// 销毁指定虚拟机的所有对象</span></span><br><span class="line">getchar();<span class="comment">// 使程序等待输入字符，方便查询结果</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果：</p><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/5.png" alt></p></li></ol><h4><span id="5-c与lua的交互">5、C#与Lua的交互</span></h4><p><a href="http://luaforge.net/projects/luainterface/" target="_blank" rel="noopener">LuaInterface官网</a></p><p>LuaInterface包括两个核心库：一个是LuaInterface.dll，一个是Luanet.dll，我们可以通过LuaInterface完成Lua和C#（CLR）之间的相互调用</p><p>参考LuaCPP项目中的LuaCSharp工程</p><ol><li><p>先下载LuaInterface并创建一个C#控制台工程</p></li><li><p>将LuaInterface.dll文件添加到引用中</p></li><li><p>编写Lua代码（注：右键lua文件将复制到输出目录改为<font color="red">始终复制</font>，文件编码改为<font color="red">ANSI</font>）</p><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/10.png" alt></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- test.lua</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"lualua"</span>);</span><br></pre></td></tr></table></figure></li><li><p>C#代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// Program.cs</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using LuaInterface;</span><br><span class="line"></span><br><span class="line">namespace LuaCSharp</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Lua lua = new Lua();</span><br><span class="line">            lua.DoFile(&quot;test.lua&quot;);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果</p><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/11.png" alt></p></li></ol><p>VS中Lua代码高亮显示<a href="https://babelua.codeplex.com/" target="_blank" rel="noopener">BabeLua</a></p><p>百度网盘链接：</p><p>链接: <a href="https://pan.baidu.com/s/1WRUIKRjdeoF_06xLYOlqTg&amp;shfl=shareset" target="_blank" rel="noopener">https://pan.baidu.com/s/1WRUIKRjdeoF_06xLYOlqTg&amp;shfl=shareset</a> 提取码: pfyb 复制这段内容后打开百度网盘手机App，操作更方便哦</p><h4><span id="6-lua的宿主语言">6、Lua的宿主语言</span></h4><p>Lua常见宿主语言有：C/C++，Java，.NET，甚至脚本语言如PHP，Ruby等</p><p>（1）Lua的使用方式</p><ul><li>Lua作为配置文件，为宿主语言应用提供参数</li><li>宿主语言作为底层库，Lua作为逻辑描述</li></ul><p>（2）工作流程</p><ol><li>宿主语言建立Lua解释器对象</li><li>将宿主语言实现的Lua扩展（若有），如函数等，注册到Lua解释器中，供其使用</li><li>读入Lua源程序或预先编译后的Lua程序（可以从文件、字符串、网络等任意来源）</li><li>执行读入的Lua程序</li></ol><p>（3）Lua与宿主语言的交互方式</p><ul><li>宿主语言通过虚拟机，对Lua脚本中的变量实现增删读写</li><li>宿主语言通过虚拟机调用Lua脚本中的函数</li><li>宿主语言定义新的数据类型共Lua脚本使用</li><li>Lua调用宿主语言编写的函数</li></ul><h4><span id="7-代码续3">7、代码（续3）</span></h4><h5><span id="1lua标准库">1）Lua标准库</span></h5><ul><li>基本库，其中包括协程分库</li><li>模块库</li><li>字符串操作 string</li><li>表操作 table</li><li>数学库 math</li><li>文件输入和输出 io</li><li>操作系统工具</li><li>调试设备</li></ul><h5><span id="2math库">2）math库</span></h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 数学库math</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">sin</span>(<span class="built_in">math</span>.<span class="built_in">rad</span>(<span class="number">30</span>))) <span class="comment">-- 求弧度再求正弦</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">floor</span>(<span class="number">5.6</span>)) <span class="comment">-- 向下取整</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">ceil</span>(<span class="number">5.6</span>)) <span class="comment">-- 向上取整</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">max</span>(<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">-4</span>,<span class="number">3.5</span>,<span class="number">4</span>,<span class="number">9</span>)) <span class="comment">-- 求最大值</span></span><br><span class="line"><span class="comment">-- 伪随机数</span></span><br><span class="line"><span class="comment">-- 1.无参调用，产生[0, 1)之间的浮点随机数。</span></span><br><span class="line"><span class="comment">-- 2.一个参数n，产生[1, n]之间的整数。</span></span><br><span class="line"><span class="comment">-- 3.两个参数，产生[n, m]之间的整数。</span></span><br><span class="line"><span class="comment">-- 函数math.randomseed用于设置伪随机数生成器的种子数</span></span><br><span class="line"><span class="comment">-- 在实际开发中, 一般使用当前时间</span></span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">randomseed</span>(<span class="built_in">os</span>.<span class="built_in">time</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">random</span>()) <span class="comment">-- [0,1)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">2</span>)) <span class="comment">-- 输出不是1就是2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">-- 输出不是3就是4</span></span><br></pre></td></tr></table></figure><h5><span id="3table库">3）table库</span></h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- table表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建</span></span><br><span class="line">myTable = &#123;&#125;</span><br><span class="line">myTable = &#123;name=<span class="string">'abc'</span>, age=<span class="number">18</span>, isMan=<span class="literal">false</span>&#125;</span><br><span class="line">myTable = &#123;<span class="number">34</span>, <span class="number">32</span>, <span class="number">50</span>, <span class="string">'abc'</span>&#125; <span class="comment">-- 当没有键的时候, 编译器会默认给每一个值, 添加一个数字的键, 从1开始</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 赋值与访问</span></span><br><span class="line"><span class="comment">---- 当键为一个数字时</span></span><br><span class="line">myTable[<span class="number">3</span>] = <span class="number">34</span> <span class="comment">-- 赋值</span></span><br><span class="line">myTable[<span class="number">3</span>] <span class="comment">-- 访问</span></span><br><span class="line"><span class="comment">---- 当键为一个字符串时</span></span><br><span class="line">myTable[<span class="string">'name'</span>] = <span class="string">'abc'</span> <span class="comment">-- 赋值</span></span><br><span class="line">myTable.name = <span class="string">'abc'</span></span><br><span class="line">myTable[<span class="string">'name'</span>] <span class="comment">-- 访问</span></span><br><span class="line">myTable.name</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 遍历</span></span><br><span class="line"><span class="comment">---- 如果只有数字键, 并且是连续的可以使用下面的遍历</span></span><br><span class="line"><span class="keyword">for</span> index = <span class="number">1</span>, <span class="built_in">table</span>.<span class="built_in">getn</span>(myTable) <span class="keyword">do</span></span><br><span class="line">    [code to <span class="built_in">execute</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">---- 所有的表都可以通过下面的方式遍历</span></span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">pairs</span>(myNames) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(index, value)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 表相关函数</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">concat</span> <span class="comment">-- 把表中所有数据连成一个字符串</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span> <span class="comment">-- 向指定位置插入一个数据</span></span><br><span class="line"><span class="built_in">table</span>.move   <span class="comment">-- 移动数据</span></span><br><span class="line"><span class="built_in">table</span>.pack   <span class="comment">-- 包装成一个表</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">remove</span> <span class="comment">-- 移除指定位置的数据</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>   <span class="comment">-- 排序</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">unpack</span> <span class="comment">-- 返回一个数组, 指定范围的数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- example</span></span><br><span class="line"><span class="keyword">local</span> tb = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>( tb, <span class="number">40</span> ) <span class="comment">-- 在table末尾插入40</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>( tb, <span class="number">2</span>, <span class="number">55</span> ) <span class="comment">-- 在table的2号位置插入55</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>.<span class="built_in">concat</span>(tb, <span class="string">", "</span>, <span class="number">1</span>, <span class="number">4</span>)) <span class="comment">-- 10, 55, 20, 30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'-------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">remove</span>( tb, <span class="number">3</span> ) <span class="comment">-- 删除2号位置的值并返回其值, 第二个参数默认值为table末尾</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>.<span class="built_in">concat</span>(tb, <span class="string">", "</span>, <span class="number">1</span>, <span class="number">4</span>)) <span class="comment">-- 10, 55, 30, 40</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'-------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 默认从小到大排序</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(tb)</span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(tb) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(index, value)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'-------------------'</span>)</span><br><span class="line"><span class="comment">-- 匿名函数, 从大到小排序</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>( tb, <span class="function"><span class="keyword">function</span> <span class="params">( a, b )</span></span></span><br><span class="line">    <span class="comment">-- return ((a &gt; b) and a) or b</span></span><br><span class="line">    <span class="keyword">return</span> a &gt; b</span><br><span class="line"><span class="keyword">end</span> ) <span class="comment">-- sortfunction 返回一个boolean</span></span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(tb) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(index, value)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'-------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> t = &#123;x=<span class="number">20</span>, y=<span class="number">30</span>, z=<span class="number">10</span>, m=<span class="number">2</span>, n=<span class="number">16</span>&#125;</span><br><span class="line"><span class="comment">-- table.sort(t)</span></span><br><span class="line"><span class="comment">-- for index, value in ipairs(t) do</span></span><br><span class="line"><span class="comment">--     print(index, value) -- 因为键不是数字, 无法排序, 无输出值</span></span><br><span class="line"><span class="comment">-- end</span></span><br><span class="line"><span class="comment">-- 对键排序</span></span><br><span class="line"><span class="keyword">local</span> keyTb = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">    keyTb[#keyTb + <span class="number">1</span>] = k <span class="comment">-- t表的键作为keyTb的值</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(keyTb) <span class="comment">-- 对键排序</span></span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(keyTb) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(v, t[v])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5><span id="4string库">4）string库</span></h5><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/9.png" alt></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- string.sub(str, start, end)</span></span><br><span class="line"><span class="keyword">local</span> str = <span class="string">'[Jelley Think]'</span></span><br><span class="line"><span class="comment">-- 找子字符串, 从1开始, 到2结束</span></span><br><span class="line"><span class="keyword">local</span> newStr = <span class="built_in">string</span>.<span class="built_in">sub</span>(str, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(newStr) <span class="comment">-- [J</span></span><br></pre></td></tr></table></figure><p>string.format</p><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/12.png" alt></p><h5><span id="5os库">5）os库</span></h5><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- os系统库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> x = <span class="built_in">os</span>.<span class="built_in">clock</span>() <span class="comment">-- 返回一个程序使用CPU的时间</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">local</span> s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">10000000</span> <span class="keyword">do</span></span><br><span class="line">    s = s+i</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 执行循环所用时间</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>( <span class="string">"elapsed time: %.2f\n"</span>, <span class="built_in">os</span>.<span class="built_in">clock</span>() - x ))</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> t = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">'*t'</span>, <span class="built_in">os</span>.<span class="built_in">time</span>())</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i,v) <span class="comment">-- 获取时间信息</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">'today is %A, in %B'</span>)) <span class="comment">-- today is Thursday, in October</span></span><br><span class="line"><span class="comment">-- 返回当前进程的环境变量varname的值, 若变量没有定义时返回nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">'os'</span>)) <span class="comment">-- Windows_NT</span></span><br></pre></td></tr></table></figure><h5><span id="6数组">6）数组</span></h5><p>Lua数组的索引键值可以使用整数表示，数组的大小不是固定的。(自动扩容？)</p><h5><span id="7迭代器">7）迭代器</span></h5><p>迭代器是一种对象，它能够用来遍历标准模板库容器中的部分或全部元素，每个迭代器对象代表容器中的确定的地址。</p><ul><li>无状态迭代器<ul><li>不保留任何状态的迭代器，因此在循环中我们可以利用无状态迭代器避免创建闭包花费额外的代价</li></ul></li><li>有状态迭代器<ul><li>迭代器需要保存多个状态信息而不是简单的状态常量和控制变量，最简单的方法是使用闭包，还有一种方法就是将所有的状态信息封装到table内，将table作为迭代器的状态常量，因为这种情况下可以将所有的信息存放在table内，所有迭代函数通常不需要第二个参数</li></ul></li></ul><h5><span id="8模块与包">8）模块与包</span></h5><p>Lua的模块是由变量、函数等已知元素组成的table，因此创建一个模块很简单，就是创建一个table，然后把需要导出的常量、函数放入其中，最后返回这个table就行。</p><p>用require引用包require(“文件名不带后缀”)</p><h5><span id="9元表">9）元表</span></h5><p>setmetatable(table, metatable)：对指定 table 设置元表(metatable)，如果元表(metatable)中存在 __metatable 键值，setmetatable 会失败。</p><p>getmetatable(table)： 返回对象的元表(metatable)。</p><p><strong>__index用来对表访问</strong></p><p>Lua 查找一个表元素时的规则，其实就是如下 3 个步骤:</p><ul><li>1.在表中查找，如果找到，返回该元素，找不到则继续</li><li>2.判断该表是否有元表，如果没有元表，返回 nil，有元表则继续</li><li>3.判断元表有没有 __index 方法，如果 __index 方法为 nil，则返回 nil；如果 __index 方法是一个表，则重复 1、2、3；如果 __index 方法是一个函数，则返回该函数的返回值</li></ul><p><strong>__newindex元方法用来对表更新</strong></p><p>当你给表的一个缺少的索引赋值，解释器就会查找__newindex 元方法：如果存在则调用这个函数而不进行赋值操作。</p><p><strong>__tosting用于修改表的输出行为</strong></p><p><strong>__call元方法在 Lua 调用一个值时调用</strong></p><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/13.png" alt></p><h5><span id="10协同程序">10）协同程序</span></h5><p>Lua协同程序与线程比较类似：拥有独立的堆栈，独立的局部变量，独立的指令指针，同时又与其他协同程序共享全局变量和其他大部分东西。</p><p>线程与协同程序的主要区别在于，一个具有多个线程的程序可以同时运行几个线程，而协同程序却需要彼此协作的运行。</p><p>在任一指定时刻只有一个协同程序在运行，并且这个正在运行的协同程序只有在明确的被要求挂起的时候才会被挂起。</p><p>协同程序有点类似同步的多线程，在等待同一个线程锁的几个线程有点类似协同。</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">coroutine.create()</td><td align="left">创建 coroutine，返回 coroutine， 参数是一个函数，当和 resume 配合使用的时候就唤醒函数调用</td></tr><tr><td align="left">coroutine.resume()</td><td align="left">重启 coroutine，和 create 配合使用</td></tr><tr><td align="left">coroutine.yield()</td><td align="left">挂起 coroutine，将 coroutine 设置为挂起状态，这个和 resume 配合使用能有很多有用的效果</td></tr><tr><td align="left">coroutine.status()</td><td align="left">查看 coroutine 的状态 注：coroutine 的状态有三种：dead，suspended，running，具体什么时候有这样的状态请参考下面的程序</td></tr><tr><td align="left">coroutine.wrap()</td><td align="left">创建 coroutine，返回一个函数，一旦你调用这个函数，就进入 coroutine，和 create 功能重复</td></tr><tr><td align="left">coroutine.running()</td><td align="left">返回正在跑的 coroutine，一个 coroutine 就是一个线程，当使用running的时候，就是返回一个 corouting 的线程号</td></tr></tbody></table><h4><span id="8-代码续7">8、代码（续7）</span></h4><h5><span id="1io库">1）IO库</span></h5><p>Lua I/O 库用于读取和处理文件。分为简单模式（和C一样）、完全模式。</p><ul><li>简单模式（simple model）拥有一个当前输入文件和一个当前输出文件，并且提供针对这些文件相关的操作。</li><li>完全模式（complete model） 使用外部的文件句柄来实现。它以一种面对对象的形式，将所有的文件操作定义为文件句柄的方法</li></ul><p>简单模式在做一些简单的文件操作时较为合适。但是在进行一些高级的文件操作的时候，简单模式就显得力不从心。例如同时读取多个文件这样的操作，使用完全模式则较为合适。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 打开文件操作语句如下:</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(filename [, mode])</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">mode</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">r</td><td align="left">以只读方式打开文件，该文件必须存在。</td></tr><tr><td align="left">w</td><td align="left">打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失。若文件不存在则建立该文件。</td></tr><tr><td align="left">a</td><td align="left">以附加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留。（EOF符保留）</td></tr><tr><td align="left">r+</td><td align="left">以可读写方式打开文件，该文件必须存在。</td></tr><tr><td align="left">w+</td><td align="left">打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。</td></tr><tr><td align="left">a+</td><td align="left">与a类似，但此文件可读可写</td></tr><tr><td align="left">b</td><td align="left">二进制模式，如果文件是二进制文件，可以加上b</td></tr><tr><td align="left">+</td><td align="left">号表示对文件既可以读也可以写</td></tr></tbody></table><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/14.png" alt></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 简单模式</span></span><br><span class="line"><span class="comment">-- 读</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">'r'</span>) <span class="comment">-- 以只读方式打开文件</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">input</span>(file) <span class="comment">-- 设置默认输入文件为test.lua</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">io</span>.<span class="built_in">read</span>()) <span class="comment">-- 输出文件第一行</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file) <span class="comment">-- 关闭打开的文件</span></span><br><span class="line"><span class="comment">-- 写 vscode不能写入</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">'test.lua'</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">output</span>(file) <span class="comment">-- 设置默认输出文件为test.lua</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"--test.lua文件末尾注释"</span>)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 完全模式</span></span><br><span class="line"><span class="comment">-- 写</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">'test.lua'</span>, <span class="string">'a'</span>)</span><br><span class="line">file: <span class="built_in">write</span>(<span class="string">'test = &#123;&#125;'</span>) <span class="comment">-- 写入test = &#123;&#125;</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file)</span><br><span class="line"><span class="comment">-- 读</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">'test.lua'</span>, <span class="string">'r'</span>)</span><br><span class="line"><span class="built_in">print</span>(file: <span class="built_in">read</span>(<span class="string">'*a'</span>)) <span class="comment">-- 读全文</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file)</span><br></pre></td></tr></table></figure><h5><span id="2lua错误处理">2）Lua错误处理</span></h5><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/15.png" alt></p><h5><span id="3面向对象">3）面向对象</span></h5><p><img src="/%E7%83%AD%E6%9B%B4%E6%96%B0/16.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、游戏更新与热更新概念及方式&quot;&gt;&lt;a href=&quot;#一、游戏更新与热更新概念及方式&quot; class=&quot;headerlink&quot; title=&quot;一、游戏更新与热更新概念及方式&quot;&gt;&lt;/a&gt;一、游戏更新与热更新概念及方式&lt;/h2&gt;&lt;h4 id=&quot;1、游戏数据更新方案&quot;&gt;&lt;a href=&quot;#1、游戏数据更新方案&quot; class=&quot;headerlink&quot; title=&quot;1、游戏数据更新方案&quot;&gt;&lt;/a&gt;1、游戏数据更新方案&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;（1）状态同步-&amp;gt;MMOG（MassiveMultiplayer Online Game）模式（网络延迟&amp;lt;100ms）&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;端游时代使用非常广泛，特别是MMORPG里面。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo美化</title>
    <link href="http://yoursite.com/2019/10/16/Hexo%E7%BE%8E%E5%8C%96/"/>
    <id>http://yoursite.com/2019/10/16/Hexo美化/</id>
    <published>2019-10-16T10:47:10.000Z</published>
    <updated>2020-10-27T13:07:11.164Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="hexo美化">Hexo美化</span></h2><h4><span id="在hexo博客上添加live-2d-模型">在Hexo博客上添加Live 2D 模型</span></h4><p>在hexo博客路径安装npm包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>然后在hexo的配置文件  <font color="red"><code>_config.yml</code></font> 中添加如下配置：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-shizuku</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure><p>详细配置参考如下<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener">Github</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># Live2D</span><br><span class="line">## https://github.com/EYHN/hexo-helper-live2d</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  # enable: false</span><br><span class="line">  scriptFrom: local # 默认</span><br><span class="line">  pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)</span><br><span class="line">  pluginJsPath: lib/ # 脚本文件相对与插件根目录路径</span><br><span class="line">  pluginModelPath: assets/ # 模型文件相对与插件根目录路径</span><br><span class="line">  # scriptFrom: jsdelivr # jsdelivr CDN</span><br><span class="line">  # scriptFrom: unpkg # unpkg CDN</span><br><span class="line">  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span><br><span class="line">  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br><span class="line">  debug: false # 调试, 是否在控制台输出日志</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko # npm-module package name</span><br><span class="line">    # use: wanko # 博客根目录/live2d_models/ 下的目录名</span><br><span class="line">    # use: ./wives/wanko # 相对于博客根目录的路径</span><br><span class="line">    # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span><br></pre></td></tr></table></figure><p>然后下载模型，模型名称可以<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">这里</a>到参考，一些模型的预览可以在<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">这里</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d-widget-model-shizuku(模型名)</span><br></pre></td></tr></table></figure><p>下载完之后，在Hexo根目录中新建文件夹 <font color="red"><code>live2d_models</code></font> ，然后在 <font color="red"><code>node_modules</code></font> 文件夹中找到刚刚下载的live2d模型，将其复制到 <font color="red"><code>live2d_models</code></font> 中，然后编辑配置文件中的 <font color="red"><code>model.use</code></font> 项，将其修改为 <font color="red"><code>live2d_models</code></font> 文件夹中的模型文件夹名称。</p><h4><span id="鼠标点击效果">鼠标点击效果</span></h4><p><code>hexo\themes\yilia\source\</code>文件夹下添加love.js，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p><code>hexo\themes\yilia\layout\layout.ejs</code>中在body标签之上加入如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/love.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4><span id="鼠标的光标更换">鼠标的光标更换</span></h4><p>将下面代码加到当前使用主题下面的style.css层叠样式表文件<font color="red">（yilia为themes/yilia/source/main.0cf68a.css）</font></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">cursor</span>: <span class="built_in">url</span>(img/鼠标样式图片的名称.cur), auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>如果使用png文件，光标可能会与背景产生违和。可以使用Axialis CursorWorkshop这个软件将png格式转换成ani或者cur格式</li><li>需要把cur文件放入同目录中的img文件夹中<font color="red">（yilia为themes/yilia/source/img/xxx.cur）</font></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo美化&quot;&gt;&lt;a href=&quot;#Hexo美化&quot; class=&quot;headerlink&quot; title=&quot;Hexo美化&quot;&gt;&lt;/a&gt;Hexo美化&lt;/h2&gt;&lt;h4 id=&quot;在Hexo博客上添加Live-2D-模型&quot;&gt;&lt;a href=&quot;#在Hexo博客上添加Live-2D-模型&quot; class=&quot;headerlink&quot; title=&quot;在Hexo博客上添加Live 2D 模型&quot;&gt;&lt;/a&gt;在Hexo博客上添加Live 2D 模型&lt;/h4&gt;&lt;p&gt;在hexo博客路径安装npm包：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save hexo-helper-live2d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后在hexo的配置文件  &lt;font color=&quot;red&quot;&gt;&lt;code&gt;_config.yml&lt;/code&gt;&lt;/font&gt; 中添加如下配置：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UnityHub破解</title>
    <link href="http://yoursite.com/2019/10/16/UnityHub%E7%A0%B4%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/16/UnityHub破解/</id>
    <published>2019-10-16T02:53:42.000Z</published>
    <updated>2020-10-27T13:06:55.905Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="unityhub破解">UnityHub破解</span></h2><p><a href="https://store.unity.com/cn/download?ref=personal" target="_blank" rel="noopener">安装包下载地址</a></p><ol><li>退出UnityHub,安装好nodejs后，用Win+R输入”cmd”执行以下命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g asar</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li><p>打开UnityHub安装目录如 C:\Program Files\Unity Hub\resources</p></li><li><p>在C:\Program Files\Unity Hub\resources打开命令行,执行以下命令解压app.asar</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Unity Hub\resources&gt; asar extract .\app.asar app</span><br></pre></td></tr></table></figure><p>​    解压后删除C:\Program Files\Unity Hub\resources\app.asar</p><ol start="4"><li>修改C:\Program Files\Unity Hub\resources\app\src\services\licenseService\licenseClient.js</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getLicenseInfo(callback) &#123;</span><br><span class="line">  // load license</span><br><span class="line">  // get latest data from licenseCore</span><br><span class="line">  //licenseInfo.activated = licenseCore.getLicenseToken().length &gt; 0;//注释这行</span><br><span class="line">  licenseInfo.activated = true;//新增这行</span><br><span class="line">  licenseInfo.flow = licenseCore.getLicenseKind();</span><br></pre></td></tr></table></figure><ol start="5"><li>C:\Program Files\Unity Hub\resources\app\src\services\licenseService\licenseCore.js</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">verifyLicenseData(xml) &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      resolve(true);//新增这行</span><br><span class="line">    if (xml === &apos;&apos;) &#123;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;UnityHub破解&quot;&gt;&lt;a href=&quot;#UnityHub破解&quot; class=&quot;headerlink&quot; title=&quot;UnityHub破解&quot;&gt;&lt;/a&gt;UnityHub破解&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://store.unity.com/cn/download?ref=personal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装包下载地址&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;退出UnityHub,安装好nodejs后，用Win+R输入”cmd”执行以下命令&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g asar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Threejs</title>
    <link href="http://yoursite.com/2019/10/11/Threejs/"/>
    <id>http://yoursite.com/2019/10/11/Threejs/</id>
    <published>2019-10-11T08:41:48.000Z</published>
    <updated>2020-10-27T04:57:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="threejs初级">Three.js初级</span></h2><p>Three.js项目地址：<a href="https://github.com/mrdoob/three.js" target="_blank" rel="noopener">https://github.com/mrdoob/three.js</a></p><h4><span id="threejs项目目录结构">–【Three.js项目目录结构：】–</span></h4><ul><li>Build目录：包含两个文件，three.js 和three.min.js 。这是three.js最终被引用的文件。一个已经压缩，一个没有压缩的js文件。</li><li>Docs目录：这里是three.js的帮助文档，里面是各个函数的api，可惜并没有详细的解释。试图用这些文档来学会three.js是不可能的。</li><li>Editor目录：一个类似3D-max的简单编辑程序，它能创建一些三维物体。</li><li>Examples目录：一些很有趣的例子demo，可惜没有文档介绍。对图像学理解不深入的同学，学习成本非常高。</li><li>Src目录：源代码目录，里面是所有源代码。</li><li>Test目录：一些测试代码，基本没用。</li><li>Utils目录：存放一些脚本，python文件的工具目录。例如将3D-Max格式的模型转换为three.js特有的json模型。</li><li>CONTRIBUTING.md文件：一个怎么报bug，怎么获得帮助的说明文档。</li><li>README.md文件：介绍three.js的一个文件，里面还包含了各个版本的更新内容列表。</li></ul><a id="more"></a><h4><span id="知识点svn下载github上一个文件夹">–【知识点：SVN下载github上一个文件夹】–</span></h4><ul><li>首先下载SVN    地址：<a href="https://tortoisesvn.net/downloads.html" target="_blank" rel="noopener">https://tortoisesvn.net/downloads.html</a></li><li>也可以下载语言扩展包，地址如上<ul><li>下面以下载three.js开源项目的build文件夹为例：<ul><li>复制要下载文件夹的地址，如：<a href="https://github.com/mrdoob/three.js/tree/dev/build" target="_blank" rel="noopener">https://github.com/mrdoob/three.js/tree/dev/build</a></li><li>在本地文件夹中右键选择TortoiseSVN-&gt;导出</li><li>版本库URL一栏中，将地址中的tree/dev一部分替换成trunk，即可下载</li></ul></li></ul></li></ul><h4><span id="webstorm及svn百度网盘">–【WebStorm及SVN百度网盘】–</span></h4><p>WebStorm 2018.1.7：链接：<a href="https://pan.baidu.com/s/1MUXuP9pv9mgoGuga62otsA" target="_blank" rel="noopener">https://pan.baidu.com/s/1MUXuP9pv9mgoGuga62otsA</a><br>提取码：jrc0 </p><p>SVN：链接：<a href="https://pan.baidu.com/s/1rRGD08aQSKc2LuI6HPX_gw" target="_blank" rel="noopener">https://pan.baidu.com/s/1rRGD08aQSKc2LuI6HPX_gw</a><br>提取码：o7wr </p><hr><h4><span id="第一个threejs程序">–【第一个Three.js程序】–</span></h4><p>（1-2.html）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-tag">canvas</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span> &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/three.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">75</span>, <span class="built_in">window</span>.innerWidth/<span class="built_in">window</span>.innerHeight, <span class="number">0.1</span>, <span class="number">1000</span>);</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer();</span></span><br><span class="line"><span class="javascript">        renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.appendChild(renderer.domElement);</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.CubeGeometry(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;<span class="attr">color</span>: <span class="number">0x00ff00</span>&#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> cube = <span class="keyword">new</span> THREE.Mesh(geometry, material); scene.add(cube);</span></span><br><span class="line">        </span><br><span class="line">        camera.position.z = 5;</span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            requestAnimationFrame(animate);</span><br><span class="line">            cube.rotation.x += 0.1;</span><br><span class="line">            cube.rotation.y += 0.1;</span><br><span class="line">            renderer.render(scene, camera);</span><br><span class="line">        &#125;</span><br><span class="line">        render();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4><span id="threejs三大组件">–【Three.js三大组件】–</span></h4><ul><li>场景(scene): 场景是所有物体的容器。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</span><br></pre></td></tr></table></figure><ul><li>相机(camera): 相机决定了场景中那个角度的景色会显示出来。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 透视相机</span></span><br><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">75</span>,<span class="built_in">window</span>.innerWidth/<span class="built_in">window</span>.innerHeight, <span class="number">0.1</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 正投影相机</span></span><br><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.OrthographicCamera( width/<span class="number">-2</span>, width/<span class="number">2</span>, height/<span class="number">2</span>, height/<span class="number">-2</span>, <span class="number">1</span>, <span class="number">1000</span> );</span><br></pre></td></tr></table></figure><ul><li>渲染器(renderer): 渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer();</span><br><span class="line">renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span><br><span class="line"><span class="comment">// 渲染器renderer的domElement元素，表示渲染器中的画布，所有的渲染都是画在domElement上</span></span><br><span class="line"><span class="comment">// appendChild表示将这个domElement挂接在body下面，这样渲染的结果就能够在页面中显示</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(renderer.domElement);</span><br></pre></td></tr></table></figure><h4><span id="添加物体">–【添加物体】–</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.CubeGeometry(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>); </span><br><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;<span class="attr">color</span>: <span class="number">0x00ff00</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> cube = <span class="keyword">new</span> THREE.Mesh(geometry, material); </span><br><span class="line">scene.add(cube);</span><br></pre></td></tr></table></figure><h4><span id="渲染">–【渲染】–</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">renderer.render(scene, camera);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染函数的原型如下：</span></span><br><span class="line">render( scene, camera, renderTarget, forceClear )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各个参数的意义是：</span></span><br><span class="line"><span class="comment">// scene：前面定义的场景</span></span><br><span class="line"><span class="comment">// camera：前面定义的相机</span></span><br><span class="line"><span class="comment">// renderTarget：渲染的目标，默认是渲染到前面定义的render变量中</span></span><br><span class="line"><span class="comment">// forceClear：每次绘制之前都将画布的内容给清除，即使自动清除标志autoClear为false，也会清除。</span></span><br></pre></td></tr></table></figure><p>渲染有两种方式: 实时渲染和离线渲染</p><p>实时渲染: 就是需要不停的对画面进行渲染，即使画面中什么也没有改变，也需要重新渲染。</p><p>离线渲染: 提前渲染。</p><p>渲染循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    cube.rotation.x += <span class="number">0.1</span>;</span><br><span class="line">    cube.rotation.y += <span class="number">0.1</span>;</span><br><span class="line">    renderer.render(scene, camera);</span><br><span class="line">    <span class="comment">// requestAnimationFrame让浏览器去执行一次参数中的函数</span></span><br><span class="line">    <span class="comment">// requestAnimationFrame()函数又让animate()再执行一次，就形成了通常所说的游戏循环</span></span><br><span class="line">    requestAnimationFrame(animate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="场景-相机-渲染器之间的关系">–【场景、相机、渲染器之间的关系】–</span></h4><p>场景是一个物体的容器，开发者可以将需要的角色放入场景中。</p><p>相机的作用就是面对场景，在场景中取一个合适的景，把它拍下来。</p><p>渲染器的作用就是将相机拍摄下来的图片，放到浏览器中去显示。</p><p>他们三者的关系如下图所示：</p><p><img src="/THREEJS/1.jpg" alt="场景、相机、渲染器之间的关系"></p><p><img src="/THREEJS/9.jpg" alt="场景、相机、渲染器之间的关系"></p><h4><span id="框架重构并加入stats监测fps">–【框架重构并加入stats(监测FPS)】–</span></h4><p>（1-3.html）</p><p>stats.js的github开源地址：<a href="https://github.com/mrdoob/stats.js" target="_blank" rel="noopener">https://github.com/mrdoob/stats.js</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Three Frame<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/Three.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/stats.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">div</span><span class="selector-id">#canvas-frame</span> &#123;</span></span><br><span class="line">                border: none;</span><br><span class="line">                cursor: pointer;</span><br><span class="line">                width: 100%;</span><br><span class="line">                height: 600px;</span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#EEEEEE</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> renderer;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">initThree</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                width = <span class="built_in">document</span>.getElementById(<span class="string">'canvas-frame'</span>).clientWidth;</span></span><br><span class="line"><span class="javascript">                height = <span class="built_in">document</span>.getElementById(<span class="string">'canvas-frame'</span>).clientHeight;</span></span><br><span class="line"><span class="javascript">                renderer = <span class="keyword">new</span> THREE.WebGLRenderer(&#123;</span></span><br><span class="line"><span class="javascript">                    antialias : <span class="literal">true</span></span></span><br><span class="line">                &#125;);</span><br><span class="line">                renderer.setSize(width, height);</span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">'canvas-frame'</span>).appendChild(renderer.domElement);</span></span><br><span class="line">                renderer.setClearColor(0xFFFFFF, 1.0);</span><br><span class="line">                </span><br><span class="line"><span class="javascript">                stats = <span class="keyword">new</span> Stats();</span></span><br><span class="line">            stats.setMode(0);</span><br><span class="line"><span class="javascript">            stats.domElement.style.position = <span class="string">'absolute'</span>;</span></span><br><span class="line"><span class="javascript">            stats.domElement.style.left = <span class="string">'0px'</span>;</span></span><br><span class="line"><span class="javascript">            stats.domElement.style.top = <span class="string">'0px'</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'canvas-frame'</span>).appendChild(stats.domElement);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> camera;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">initCamera</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">45</span>, width / height, <span class="number">1</span>, <span class="number">10000</span>);</span></span><br><span class="line">                camera.position.x = 0;</span><br><span class="line">                camera.position.y = 1000;</span><br><span class="line">                camera.position.z = 0;</span><br><span class="line">                camera.up.x = 0;</span><br><span class="line">                camera.up.y = 0;</span><br><span class="line">                camera.up.z = 1;</span><br><span class="line">                camera.lookAt(0, 0, 0);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> scene;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">initScene</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                scene = <span class="keyword">new</span> THREE.Scene();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> light;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">initLight</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                light = <span class="keyword">new</span> THREE.DirectionalLight(<span class="number">0xFF0000</span>, <span class="number">1.0</span>, <span class="number">0</span>);</span></span><br><span class="line">                light.position.set(100, 100, 200);</span><br><span class="line">                scene.add(light);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">initObject</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>)</span></span></span><br><span class="line">            &#123;</span><br><span class="line">                renderer.clear();</span><br><span class="line">                renderer.render(scene, camera);</span><br><span class="line">                requestAnimationFrame(animate);</span><br><span class="line">                stats.update();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">threeStart</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                initThree();</span><br><span class="line">                initCamera();</span><br><span class="line">                initScene();</span><br><span class="line">                initLight();</span><br><span class="line">                initObject();</span><br><span class="line">                animate();</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"threeStart();"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"canvas-frame"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4><span id="点-线-面">–【点、线、面】–</span></h4><p>在计算机世界里，3D世界是由点组成，两个点能够组成一条直线，三个不在一条直线上的点就能够组成一个三角形面，无数三角形面就能够组成各种形状的物体。</p><p>【点】</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Three.js中Vector3的实现</span></span><br><span class="line">THREE.Vector3 = <span class="function"><span class="keyword">function</span> (<span class="params"> x, y, z </span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = x || <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.y = y || <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.z = z || <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个点, x=4, y=8, z=9</span></span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> THREE.Vecotr3(<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> THREE.Vector3();</span><br><span class="line">point.set(<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure><p>【线】</p><p>通过两个点来画一条线（2-1.html）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.Geometry();</span><br><span class="line">    <span class="keyword">var</span> material = <span class="keyword">new</span> THREE.LineBasicMaterial( &#123; <span class="attr">vertexColors</span>: <span class="literal">true</span> &#125; );</span><br><span class="line">    <span class="keyword">var</span> color1 = <span class="keyword">new</span> THREE.Color( <span class="number">0x444444</span> ), color2 = <span class="keyword">new</span> THREE.Color( <span class="number">0xFF0000</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线的材质可以由2点的颜色决定</span></span><br><span class="line">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> THREE.Vector3( <span class="number">-100</span>, <span class="number">0</span>, <span class="number">100</span> );</span><br><span class="line">    <span class="keyword">var</span> p2 = <span class="keyword">new</span> THREE.Vector3(  <span class="number">100</span>, <span class="number">0</span>, <span class="number">-100</span> );</span><br><span class="line">    geometry.vertices.push(p1);</span><br><span class="line">    geometry.vertices.push(p2);</span><br><span class="line">    geometry.colors.push( color1, color2 );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> line = <span class="keyword">new</span> THREE.Line(geometry, material, THREE.LineSegments);</span><br><span class="line">    scene.add(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>声明一个几何体geometry</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.Geometry();</span><br><span class="line"><span class="comment">// 几何体里面有一个vertices变量，可以用来存放点。</span></span><br></pre></td></tr></table></figure></li><li><p>定义一种线条的材质</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LineBasicMaterial(parameters)</span><br><span class="line"><span class="comment">// Parameters是一个定义材质外观的对象，它包含多个属性来定义材质，这些属性是：</span></span><br><span class="line"><span class="comment">// color: 线条的颜色，用16进制来表示，默认的颜色是白色。</span></span><br><span class="line"><span class="comment">// linewidth: 线条的宽度，默认时候1个单位宽度。</span></span><br><span class="line"><span class="comment">// linecap: 线条两端的外观，默认是圆角端点，当线条较粗的时候才看得出效果，如果线条很细，那么你几乎看不出效果了。</span></span><br><span class="line"><span class="comment">// linejoin: 两个线条的连接点处的外观，默认是“round”，表示圆角。</span></span><br><span class="line"><span class="comment">// vertexColor: 定义线条材质是否使用顶点颜色，这是一个boolean值。意思是，线条各部分的颜色会根据顶点的颜色来进行插值。</span></span><br><span class="line"><span class="comment">// fog: 定义材质的颜色是否受全局雾效的影响。</span></span><br></pre></td></tr></table></figure></li><li><p>定义两种颜色，分别表示线条两端的颜色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color1 = <span class="keyword">new</span> THREE.Color( <span class="number">0x444444</span> );</span><br><span class="line"><span class="keyword">var</span> color2 = <span class="keyword">new</span> THREE.Color( <span class="number">0xFF0000</span> );</span><br></pre></td></tr></table></figure></li><li><p>定义两个顶点的位置，并放到geometry中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> THREE.Vector3( <span class="number">-100</span>, <span class="number">0</span>, <span class="number">100</span> );</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> THREE.Vector3(  <span class="number">100</span>, <span class="number">0</span>, <span class="number">-100</span> );</span><br><span class="line"></span><br><span class="line">geometry.vertices.push(p1);</span><br><span class="line">geometry.vertices.push(p2);</span><br></pre></td></tr></table></figure></li><li><p>为4中定义的两个顶点，设置不同的颜色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geometry.colors.push( color1, color2 );</span><br></pre></td></tr></table></figure></li><li><p>定义一条线</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> line = <span class="keyword">new</span> THREE.Line(geometry, material, THREE.LineSegments);</span><br></pre></td></tr></table></figure></li><li><p>添加到场景中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scene.add(line);</span><br></pre></td></tr></table></figure></li></ol><p>线条的深入理解：</p><p>一条线由点，材质和颜色组成。</p><p>点由THREE.Vector3表示，Threejs中没有提供单独画点的函数，它必须被放到一个THREE.Geometry形状中，这个结构中包含一个数组vertices，这个vertices就是存放无数的点（THREE.Vector3）的数组。</p><p>然后我们需要给线加一种材质，可以使用专为线准备的材质，THREE.LineBasicMaterial。</p><p>颜色可以通过顶点颜色，进行插值生成。也可以在材质中定义一种颜色。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> THREE.LineBasicMaterial( &#123;<span class="attr">vertexColors</span>: THREE.VertexColors&#125; );</span><br><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> THREE.LineBasicMaterial( &#123; <span class="attr">color</span>: <span class="number">0xFF0000</span>&#125; );</span><br></pre></td></tr></table></figure><p>【面】</p><p>绘制坐标平面（2-2.html）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.Geometry();</span><br><span class="line">    geometry.vertices.push( <span class="keyword">new</span> THREE.Vector3( - <span class="number">500</span>, <span class="number">0</span>, <span class="number">0</span> ) );</span><br><span class="line">    geometry.vertices.push( <span class="keyword">new</span> THREE.Vector3( <span class="number">500</span>, <span class="number">0</span>, <span class="number">0</span> ) );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">20</span>; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">var</span> line = <span class="keyword">new</span> THREE.Line( geometry, <span class="keyword">new</span> THREE.LineBasicMaterial( &#123; <span class="attr">color</span>: <span class="number">0x000000</span>, <span class="attr">opacity</span>: <span class="number">0.2</span> &#125; ) );</span><br><span class="line">        line.position.z = ( i * <span class="number">50</span> ) - <span class="number">500</span>;</span><br><span class="line">        scene.add( line );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> line = <span class="keyword">new</span> THREE.Line( geometry, <span class="keyword">new</span> THREE.LineBasicMaterial( &#123; <span class="attr">color</span>: <span class="number">0x000000</span>, <span class="attr">opacity</span>: <span class="number">0.2</span> &#125; ) );</span><br><span class="line">        line.position.x = ( i * <span class="number">50</span> ) - <span class="number">500</span>;</span><br><span class="line">        line.rotation.y = <span class="number">90</span> * <span class="built_in">Math</span>.PI / <span class="number">180</span>;</span><br><span class="line">        scene.add( line );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义两个点构成一条线</li><li>将这条线段复制20次，分别平行移动到z轴的不同位置，就能够形成一组平行的线段。</li><li>将这条线先围绕y轴旋转90度，然后再复制20份，平行于z轴移动到不同的位置，也能形成一组平行线。</li></ol><p>【坐标系】</p><p>Three.js是右手坐标系</p><p><img src="/THREEJS/2.jpg" alt="坐标系"></p><h4><span id="让场景动起来">–【让场景动起来】–</span></h4><ol><li>改变相机的位置，让物体移动</li><li>改变物体自身的位置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（3-1.html  3-2.html加入了性能测试stats）</span></span><br><span class="line"><span class="keyword">var</span> mesh;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 圆柱</span></span><br><span class="line">    <span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.CylinderGeometry( <span class="number">100</span>,<span class="number">150</span>,<span class="number">400</span>);</span><br><span class="line">    <span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshLambertMaterial( &#123; <span class="attr">color</span>:<span class="number">0xFFFFFF</span>&#125; );</span><br><span class="line">    mesh = <span class="keyword">new</span> THREE.Mesh( geometry,material);</span><br><span class="line">    mesh.position = <span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    scene.add(mesh);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改变相机的位置, 让物体移动</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//renderer.clear();</span></span><br><span class="line">    camera.position.x+=<span class="number">1</span>;</span><br><span class="line">    renderer.render(scene, camera);</span><br><span class="line">    requestAnimationFrame(animate);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改变物体自身的位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mesh.position.x-=<span class="number">1</span>;</span><br><span class="line">    renderer.render(scene, camera);</span><br><span class="line">    requestAnimationFrame(animate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tween.js的github开源地址：<a href="https://github.com/tweenjs/tween.js" target="_blank" rel="noopener">https://github.com/tweenjs/tween.js</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用动画引擎Tween.js来创建动画（3-3.html）</span></span><br><span class="line"><span class="number">1.</span> 引入</span><br><span class="line">&lt;script src=<span class="string">"../js/tween.umd.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">function initTween()</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 让物体动</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ new TWEEN.Tween( mesh.position).to(&#123;x:-400&#125;,3000).repeat(Infinity).start();</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 让相机动</span></span><br><span class="line"><span class="regexp">    new TWEEN.Tween(camera.position).to(&#123;x:400&#125;,3000).repeat(Infinity).start();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function animation()</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">    renderer.render(scene, camera);</span></span><br><span class="line"><span class="regexp">    requestAnimationFrame(animation);</span></span><br><span class="line"><span class="regexp">    stats.update();</span></span><br><span class="line"><span class="regexp">    TWEEN.update();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4><span id="相机">–【相机】–</span></h4><p>Three.js中相机的表示是THREE.Camera，它是相机的抽象基类，其子类有两种相机，分别是正投影相机THREE.OrthographicCamera和透视投影相机THREE.PerspectiveCamera。类图如下所示：</p><p><img src="/THREEJS/3.png" alt="类图"></p><p>正投影相机有时候也叫正交投影摄像机，下图显示了正交摄像机投影和透视投影之间的差别。</p><p><img src="/THREEJS/4.png" alt="正交摄像机投影和透视投影之间的差别"></p><p>正投影和透视投影的区别是：</p><p>透视投影有一个基本点，就是远处的物体比近处的物体小。</p><p>正投影远近高低比例都相同。</p><p>【正投影相机】</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OrthographicCamera( left, right, top, bottom, near, far )</span><br></pre></td></tr></table></figure><p><img src="/THREEJS/6.png" alt="正投影相机"></p><ul><li>left：左平面距离相机中心点的垂直距离。</li><li>right：右平面距离相机中心点的垂直距离。</li><li>top：顶平面距离相机中心点的垂直距离。</li><li>bottom：底平面距离相机中心点的垂直距离。</li><li>near：近平面距离相机中心点的垂直距离。</li><li>far：远平面距离相机中心点的垂直距离。</li></ul><p>有了这些参数和相机中心点，我们这里将相机的中心点又定义为相机的位置。通过这些参数，我们就能够在三维空间中唯一的确定上图的一个长方体。这个长方体也叫做视景体。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.OrthographicCamera(width/<span class="number">-2</span>, width/<span class="number">2</span>, height/<span class="number">2</span>, height/<span class="number">-2</span>, <span class="number">1</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>【透视投影相机】</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PerspectiveCamera( fov, aspect, near, far )</span><br></pre></td></tr></table></figure><p><img src="/THREEJS/8.png" alt="透视投影相机"></p><p><img src="/THREEJS/7.png" alt="透视图" style="zoom: 67%;"><img src="/THREEJS/5.png" alt="侧视图" style="zoom:67%;"></p><ul><li>视角fov：这个最难理解,我的理解是,眼睛睁开的角度，即视角的大小。如果设置为0，相当你闭上眼睛了，所以什么也看不到；如果为180，那么可以认为你的视界很广阔，但是在180度的时候，往往物体很小，因为他在你的整个可视区域中的比例变小了。</li><li>近平面near：表示你近处的裁面的距离。</li><li>远平面far：表示你远处的裁面。</li><li>纵横比aspect：实际窗口的纵横比，即宽度除以高度。这个值越大，说明你宽度越大。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">45</span>, width / height, <span class="number">1</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>（4-1.html）</p><p>（4-2.html）GUI</p><p>dat.gui.js的github开源地址：<a href="https://github.com/dataarts/dat.gui" target="_blank" rel="noopener">https://github.com/dataarts/dat.gui</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line">&lt;script src=<span class="string">"../js/dat.gui.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 控制fov</span></span><br><span class="line"><span class="regexp">function setCameraFov(fov)</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">    camera.fov = fov;</span></span><br><span class="line"><span class="regexp">    camera.updateProjectionMatrix();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">var text;</span></span><br><span class="line"><span class="regexp">function createUI() &#123;</span></span><br><span class="line"><span class="regexp">    text = new function () &#123;</span></span><br><span class="line"><span class="regexp">        this.fov = 45;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">    var gui = new dat.GUI();</span></span><br><span class="line"><span class="regexp">    gui.add(text, 'fov', 0, 180).name('Fov');</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function animate() &#123;</span></span><br><span class="line"><span class="regexp">    setCameraFov(text.fov);</span></span><br><span class="line"><span class="regexp">    renderer.render(scene, camera);</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 渲染循环</span></span><br><span class="line"><span class="regexp">    requestAnimationFrame(animate);</span></span><br><span class="line"><span class="regexp">    stats.update();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4><span id="orbitcontrolsjs">–【OrbitControls.js】–</span></h4><p>github地址：<a href="https://github.com/fibo/three-orbitcontrols" target="_blank" rel="noopener">https://github.com/fibo/three-orbitcontrols</a></p><p>使用时删除这两行代码（否则会出现错误）：</p><p>Uncaught ReferenceError: require is not defined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> THREE = <span class="built_in">require</span>(<span class="string">'three'</span>);<span class="comment">// 第一行</span></span><br><span class="line"><span class="comment">/* three-orbitcontrols addendum */</span> <span class="built_in">module</span>.exports = exports.default = THREE.OrbitControls;<span class="comment">// 最后一行</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line">&lt;script src=<span class="string">"/js/three.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="/</span>js/OrbitControls.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">var controls;</span></span><br><span class="line"><span class="string">function initControls()&#123;</span></span><br><span class="line"><span class="string">    controls = new THREE.OrbitControls(camera,renderer.domElement);</span></span><br><span class="line"><span class="string">    controls.target = new THREE.Vector3(0, 0, 0);</span></span><br><span class="line"><span class="string">    controls.autoRotate = false;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">// 在animate函数中加入</span></span><br><span class="line"><span class="string">controls.update();</span></span><br><span class="line"><span class="string">// 在threeStart函数中加入</span></span><br><span class="line"><span class="string">initControls();</span></span><br></pre></td></tr></table></figure><h4><span id="窗口缩放时自动调整">–【窗口缩放时自动调整】–</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在initThree函数中加入如下监听代码</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, onWindowResize, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onWindowResize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    camera.aspect = <span class="built_in">window</span>.innerWidth/innerHeight;</span><br><span class="line">    camera.updateProjectionMatrix();</span><br><span class="line">    renderer.setSize(<span class="built_in">window</span>.innerWidth,<span class="built_in">window</span>.innerHeight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="光照">–【光照】–</span></h4><p>【光源基类】</p><p>在Threejs中，光源用Light表示，它是所有光源的基类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">THREE.Light ( hex )</span><br><span class="line"><span class="comment">// hex, 接受一个16进制的颜色值。</span></span><br><span class="line"><span class="comment">// Var redLight = new THREE.Light(0xFF0000);</span></span><br><span class="line"><span class="comment">// 测试时, 实例化出错, 理解为抽象基类, 不可实例化</span></span><br><span class="line"><span class="comment">// 官方文档：Abstract base class for lights</span></span><br></pre></td></tr></table></figure><p>【派生光源】</p><p>继承结构：</p><p><img src="/THREEJS/12.jpg" alt></p><p>光的基类是 Light其是继承自 Object3D 的。它作为一个对象被添加进了 Scene 中从而进行渲染的。影的基类是 LightShadow它是作为光的内部类供光照在内部进行阴影计算的我们不能直接构造它。如图并不是所有的光照都会产生阴影是否会产生阴影与光照所具备的特性有关。</p><p><strong>材质与光源的关系</strong></p><p>材质就是物体的质地。我们可以用撤分文字的方法来理解。<strong>材质</strong>就是<strong>材料和质感的完美结合</strong>。</p><p>在渲染程序中，它是表面各<strong>可视属性</strong>的结合，这些可视属性是指表面的*<font color="red">色彩、纹理、光滑度、透明度、反射率、折射率、发光度等。</font>*正是有了这些属性，才能让我们识别三维中的模型是什么做成的，也正是有了这些属性，我们计算机三维的虚拟世界才会和真实世界一样缤纷多彩。</p><p>这就是材质的真相吗？答案是否定的。不要奇怪，我们必须仔细分析产生不同材质的原因，才能让我们更好的把握质感。那么，材质的真相到底是什么呢？<font color="red">仍然是光，离开光材质是无法体现的。</font>举例来说，借助夜晚微弱的天空光，我们往往很难分辨物体的材质，因为他们很多都表现出黑色，我们难以区分是铝合金，还是塑料的。而在正常的照明条件下，则很容易分辨。另外，在彩色光源的照射下，我们也很难分辨物体表面的颜色，在白色光源的照射下则很容易。这种情况表明了物体的材质与光的微妙关系。下面，我们将具体分析两者间的相互作用。</p><ol><li><p>不带任何光源的物体（5-1.html）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> light;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initLight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.CubeGeometry( <span class="number">200</span>, <span class="number">100</span>, <span class="number">50</span>,<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshLambertMaterial( &#123; <span class="attr">color</span>:<span class="number">0xFF0000</span>&#125; );</span><br><span class="line">    <span class="keyword">var</span> mesh = <span class="keyword">new</span> THREE.Mesh( geometry,material);</span><br><span class="line">    mesh.position = <span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    scene.add(mesh);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/THREEJS/13.png" alt="运行结果"></p><p>当没有任何光源的时候，最终的颜色将是黑色，无论材质是什么颜色。</p></li><li><p>Lambert材质与光源</p><p>Lambert材质，这是在灰暗的或不光滑的表面产生均匀散射而形成的材质类型。比如一张纸就是Lambert表面。 首先它粗糙不均匀，不会产生镜面效果。Lambert材质表面会在所有方向上均匀地散射灯光，这就会使颜色看上去比较均匀。（5-2.html）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> light;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initLight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    light = <span class="keyword">new</span> THREE.AmbientLight(<span class="number">0xFF0000</span>);</span><br><span class="line">    scene.add(light);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.CubeGeometry( <span class="number">200</span>, <span class="number">100</span>, <span class="number">50</span>,<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshLambertMaterial( &#123; <span class="attr">color</span>:<span class="number">0x88FF00</span>&#125; );</span><br><span class="line">    <span class="keyword">var</span> mesh = <span class="keyword">new</span> THREE.Mesh( geometry,material);</span><br><span class="line">    mesh.position = <span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    scene.add(mesh);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/THREEJS/14.png" alt="运行结果"></p><p>长方体本身的颜色是0x88FF00（暗绿色），光源的颜色是0xFF0000，红色的光照在物体上，物体反射了红色的光，所以呈现红色。</p></li></ol><p><strong>环境光</strong></p><p>环境光是经过多次反射而来的光称为环境光，无法确定其最初的方向。环境光是一种无处不在的光。环境光源放出的光线被认为来自任何方向。因此，当你仅为场景指定环境光时，所有的物体无论法向量如何，都将表现为同样的明暗程度。 （这是因为，反射光可以从各个方向进入您的眼睛）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">THREE.AmbientLight( color, intensity )</span><br><span class="line"><span class="comment">// color：光线的颜色，用16进制表示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// intensity：光线的强度，默认为1。因为RGB的三个值均在0~255之间，不能反映出光照的强度变化，光照越强，物体表面就更明亮。它的取值范围是0到1。如果为0，表示光线基本没什么作用，那么物体就会显示为黑色。</span></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">var</span> light = <span class="keyword">new</span> THREE.AmbientLight( <span class="number">0xFF0000</span> );</span><br><span class="line">scene.add( light );</span><br></pre></td></tr></table></figure><p>环境光就是在场景中无处不在的光，它对物体的影响是均匀的，也就是无论你从物体的那个角度观察，物体的颜色都是一样的，这就是伟大的环境光。</p><p>你可以把环境光放在任何一个位置，它的光线是不会衰减的，是永恒的某个强度的一种光源。</p><p><strong>平行光</strong></p><p>平行光又称为方向光（Directional Light），是一组没有衰减的平行的光线，类似太阳光的效果。（5-3.html）</p><p><img src="/THREEJS/15.jpg" alt="方向光"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">THREE.DirectionalLight = <span class="function"><span class="keyword">function</span> (<span class="params"> color, intensity </span>)</span></span><br><span class="line"><span class="function">// <span class="title">color</span>：光线的颜色，用16进制表示</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// <span class="title">intensity</span>：光线的强度，默认为1。因为<span class="title">RGB</span>的三个值均在0~255之间，不能反映出光照的强度变化，光照越强，物体表面就更明亮。它的取值范围是0到1。如果为0，表示光线基本没什么作用，那么物体就会显示为黑色。</span></span><br><span class="line"><span class="function">// 测试结果：平行光的方向是从平行光的位置照向(<span class="params"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span>)</span></span><br></pre></td></tr></table></figure><p>方向由位置和原点（0,0,0）来决定，方向光只与方向有关，与离物体的远近无关。</p><p><strong>点光源</strong></p><p>点光源是理想化为质点的向四面八方发出光线的光源。点光源就是在一个点向周围发出的光，所以，你会看到照在物体上的光，有点像球的形状。（5-5.html）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">THREE.PointLight( color, intensity, distance, decay )</span><br><span class="line"><span class="comment">// color：光线的颜色，用16进制表示</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// intensity：光线的强度，默认为1。因为RGB的三个值均在0~255之间，不能反映出光照的强度变化，光照越强，物体表面就更明亮。它的取值范围是0到1。如果为0，表示光线基本没什么作用，那么物体就会显示为黑色。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//distance: 这个距离表示从光源到光照强度为0的位置。当设置为0时, 光永远不会消失(距离无穷大)。缺省值0。</span></span><br><span class="line"><span class="comment">// decay: 沿着光照距离的衰退量。缺省值1。在 physically correct 模式中，decay = 2。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">light = <span class="keyword">new</span> THREE.PointLight(<span class="number">0x0000EE</span>)</span><br><span class="line">light.position.set(<span class="number">0</span>,<span class="number">0</span>,<span class="number">50</span>);</span><br><span class="line">scene.add(light);</span><br></pre></td></tr></table></figure><h4><span id="纹理">–【纹理】–</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 纹理类</span></span><br><span class="line">THREE.Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy )</span><br><span class="line"><span class="comment">// 各参数的意义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// image：一个图片类型, 加载方式如下：</span></span><br><span class="line"><span class="comment">// url 是一个http://xxxx/aaa.jpg 的类似地址，javascript没有从本地加载数据的能力，</span></span><br><span class="line"><span class="comment">// 所以没有办法从您电脑的C盘加载数据。</span></span><br><span class="line"><span class="keyword">var</span> textureLoader = <span class="keyword">new</span> THREE.TextureLoader();</span><br><span class="line">texture = textureLoader.load(url);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapping: 一个THREE.UVMapping()类型, 它表示的是纹理坐标。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// wrapS：表示x轴的纹理的回环方式，就是当纹理的宽度小于需要贴图的平面的宽度的时候，平面剩下的部分应该以何种方式贴图的问题。</span></span><br><span class="line"><span class="comment">// wrapT：表示y轴的纹理回环方式。</span></span><br><span class="line"><span class="comment">// magFilter和minFilter表示过滤的方式, 这是OpenGL的基本概念, 我将在下面讲一下, 目前你不用担心它的使用。当您不设置的时候, 它会取默认值, 所以, 我们这里暂时不理睬它。</span></span><br><span class="line"><span class="comment">// format：表示加载的图片的格式, 这个参数可以取值THREE.RGBAFormat, RGBFormat等。</span></span><br><span class="line"><span class="comment">// type：表示存储纹理的内存的每一个字节的格式, 是有符号, 还是没有符号, 是整形, 还是浮点型。不过这里默认是无符号型（THREE.UnsignedByteType）。</span></span><br><span class="line"><span class="comment">// anisotropy：各向异性过滤。使用各向异性过滤能够使纹理的效果更好，但是会消耗更多的内存、CPU、GPU时间。</span></span><br></pre></td></tr></table></figure><p><strong>纹理坐标</strong></p><p>在正常的情况下，你在0.0到1.0的范围内指定纹理坐标。纹理坐标如下图：</p><p><img src="/THREEJS/10.jpg" alt="纹理坐标"></p><p>当我们用一幅图来做纹理的时候，那么这幅图就隐示的被赋予了如图一样的纹理坐标，这个纹理坐标将被对应到一个形状上。</p><p>【图片做纹理】</p><p>在平面上贴一张纹理（6-1.html）</p><ol><li><p>画一个平面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// THREE.PlaneGeometry(width, height, widthSegments, heightSegments)</span></span><br><span class="line"><span class="comment">// 后两个参数代表在宽高方向上将线分割为几段</span></span><br><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.PlaneGeometry( <span class="number">500</span>, <span class="number">300</span>, <span class="number">1</span>, <span class="number">1</span> );<span class="comment">// 4个顶点</span></span><br></pre></td></tr></table></figure></li><li><p>为平面赋予纹理坐标</p><p>平面有4个顶点，所以我们只需要指定4个纹理坐标就行了。纹理坐标由顶点的uv成员来表示，uv被定义为一个二维向量THREE.Vector2()，我们可以通过如下代码来为平面定义纹理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">geometry.vertices[<span class="number">0</span>].uv = <span class="keyword">new</span> THREE.Vector2(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">geometry.vertices[<span class="number">1</span>].uv = <span class="keyword">new</span> THREE.Vector2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">geometry.vertices[<span class="number">2</span>].uv = <span class="keyword">new</span> THREE.Vector2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">geometry.vertices[<span class="number">3</span>].uv = <span class="keyword">new</span> THREE.Vector2(<span class="number">0</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>注意，4个顶点分别对应了纹理的4个顶点。还要注意（0,0），（1,0），（1,1），（0,1）他们之间的顺序是逆时针方向。大家在给平面赋纹理坐标的时候也要注意方向，不然three.js是分不清楚的。</p></li><li><p>加载纹理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textureLoader = <span class="keyword">new</span> THREE.TextureLoader();</span><br><span class="line"><span class="comment">// textureLoader.load(url, onLoad, onProgress, onError)</span></span><br><span class="line"><span class="keyword">var</span> texture = textureLoader.load(<span class="string">"../textures/4.jpg"</span>);</span><br></pre></td></tr></table></figure></li><li><p>将纹理应用于材质</p><p>加载好纹理，万事俱备了，只需要将纹理映射到材质就可以了。我们这里使用了一个普通的材质THREE.MeshBasicMaterial，材质中有一个map属性，可以直接接受纹理，我们可以这样定义一个带纹理的材质：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;<span class="attr">map</span>:texture&#125;);</span><br><span class="line"><span class="keyword">var</span> mesh = <span class="keyword">new</span> THREE.Mesh( geometry,material );</span><br><span class="line">scene.add( mesh );</span><br></pre></td></tr></table></figure></li></ol><p>【canvas做纹理】</p><p>流程如下：</p><p><img src="/THREEJS/11.jpg" alt="canvas做纹理流程"></p><p>canvas可以传递给url参数（6-3.html）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">texture = <span class="keyword">new</span> THREE.Texture(canvas);</span><br></pre></td></tr></table></figure><p>Note：</p><p>代码中clock.js就是绘制时钟的代码，里面有一个全局变量canvas，表示canvas本身。另外，需要注意的是在定义了纹理之后，我们将texture.needsUpdate设置为了true，如果不设置为true，那么纹理就不会更新，很可能你看到的是一个黑色的正方体，原因是纹理没有被载入之前，就开始渲染了，而渲染使用了默认的材质颜色。</p><p>这是什么原因呢？是这样的，纹理的绘制是需要一段时间的，javascript是可以异步运行的，在canvas绘制出时钟之前，可能three.js就开始根据纹理渲染图形了。如果纹理不更新，那么正方体一直会是以前没有绘制完成的纹理，很可能是材质本身的颜色。</p><p>另一个方面，canvas由于绘制的是时钟，其每一秒都会重新绘制一次，所以为了让正方体上的纹理可以及时反映canvas上的时钟，也需要不断的更新纹理，所以需要将needUpdate设置为true，不过缺点是其效率会低一些，不过这种效率的降低，是完全可以接受的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在animate函数中将texture.needsupdate设置为true即可解决上述问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">texture.needsUpdate = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Three-js初级&quot;&gt;&lt;a href=&quot;#Three-js初级&quot; class=&quot;headerlink&quot; title=&quot;Three.js初级&quot;&gt;&lt;/a&gt;Three.js初级&lt;/h2&gt;&lt;p&gt;Three.js项目地址：&lt;a href=&quot;https://github.com/mrdoob/three.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mrdoob/three.js&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;–【Three-js项目目录结构：】–&quot;&gt;&lt;a href=&quot;#–【Three-js项目目录结构：】–&quot; class=&quot;headerlink&quot; title=&quot;–【Three.js项目目录结构：】–&quot;&gt;&lt;/a&gt;–【Three.js项目目录结构：】–&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Build目录：包含两个文件，three.js 和three.min.js 。这是three.js最终被引用的文件。一个已经压缩，一个没有压缩的js文件。&lt;/li&gt;
&lt;li&gt;Docs目录：这里是three.js的帮助文档，里面是各个函数的api，可惜并没有详细的解释。试图用这些文档来学会three.js是不可能的。&lt;/li&gt;
&lt;li&gt;Editor目录：一个类似3D-max的简单编辑程序，它能创建一些三维物体。&lt;/li&gt;
&lt;li&gt;Examples目录：一些很有趣的例子demo，可惜没有文档介绍。对图像学理解不深入的同学，学习成本非常高。&lt;/li&gt;
&lt;li&gt;Src目录：源代码目录，里面是所有源代码。&lt;/li&gt;
&lt;li&gt;Test目录：一些测试代码，基本没用。&lt;/li&gt;
&lt;li&gt;Utils目录：存放一些脚本，python文件的工具目录。例如将3D-Max格式的模型转换为three.js特有的json模型。&lt;/li&gt;
&lt;li&gt;CONTRIBUTING.md文件：一个怎么报bug，怎么获得帮助的说明文档。&lt;/li&gt;
&lt;li&gt;README.md文件：介绍three.js的一个文件，里面还包含了各个版本的更新内容列表。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo搬运</title>
    <link href="http://yoursite.com/2019/09/03/Hexo%E6%90%AC%E8%BF%90/"/>
    <id>http://yoursite.com/2019/09/03/Hexo搬运/</id>
    <published>2019-09-03T13:29:28.000Z</published>
    <updated>2020-10-27T13:21:00.933Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="hexo搬运">Hexo搬运</span></h2><p><strong>1. 将原电脑上配置好并生成的hexo目录拷贝到新电脑上，无需全部拷贝，拷贝如下几个目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>2. 安装Node.js</strong></p><p>官网：<a href="http://www.nodejs.org" target="_blank" rel="noopener">www.nodejs.org</a></p><p><strong>3. 安装hexo，执行命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p><strong>4. 安装好后，进入hexo/目录</strong></p><p><strong>5. 模块安装，执行命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p><strong>6. hexo部署</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo n &apos;新博客&apos;</span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo搬运&quot;&gt;&lt;a href=&quot;#Hexo搬运&quot; class=&quot;headerlink&quot; title=&quot;Hexo搬运&quot;&gt;&lt;/a&gt;Hexo搬运&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1. 将原电脑上配置好并生成的hexo目录拷贝到新电脑上，无需全部拷贝，拷贝如下几个目录&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_config.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;package.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scaffolds/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;themes/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Qt</title>
    <link href="http://yoursite.com/2019/09/01/Qt/"/>
    <id>http://yoursite.com/2019/09/01/Qt/</id>
    <published>2019-09-01T12:36:14.000Z</published>
    <updated>2019-10-21T14:00:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="qt">Qt</span></h2><h3><span id="第一章">第一章</span></h3><h4><span id="1-qt的介绍-优点-成功案例">1. Qt的介绍、优点、成功案例</span></h4><p><strong>介绍：</strong></p><p>Qt是一个<font color="red">跨平台</font>的C++<font color="red">图形用户界面应用程序框架</font>。它为应用程序开发者提供建立艺术级图形界面所需的所有功能。它是完全面向对象的，很容易扩展，并且允许真正的组件编程。</p><a id="more"></a><p><strong>优点：</strong></p><ul><li>跨平台，几乎支持所有的平台</li><li>接口简单，容易上手，学习Qt框架对学习其他框架有参考意义</li><li>一定程度上简化了内存回收机制</li><li>开发效率高，能够快速的构建应用程序</li><li>可以进行嵌入式开发</li><li>有很好的社区氛围，市场份额在缓慢上升</li></ul><p><strong>成功案例：</strong></p><ul><li>Linux桌面环境 KDE</li><li>WPS Office 办公软件</li><li>Skype 网络电话</li><li>Google Earth 谷歌地图</li><li>VLC 多媒体播放器</li><li>VirtualBox 虚拟机软件</li></ul><h4><span id="2-创建第一个qt程序">2. 创建第一个Qt程序</span></h4><ol><li>点击创建项目后，设置项目路径以及名称<ul><li>名称不能有中文与空格</li><li>不能使用中文路径</li></ul></li><li>默认创建有窗口类，基类有三种选择：QWidget、QMainWindow、QDialog</li></ol><h4><span id="3-熟悉按钮控件常用的api">3. 熟悉按钮控件常用的API</span></h4><p>创建 QPushButton * btn = new QPushButton()</p><p>设置父亲 setParent()</p><p>设置文本 setText(“文字”)</p><p>设置位置 move()</p><p>重置窗口大小 resize()</p><p>设置窗口标题 setWindowTitle()</p><p>设置窗口固定大小 setFixedSize()</p><h4><span id="4-对象树的基本概念">4. 对象树的基本概念</span></h4><p><img src="/Qt/Qt%E5%AF%B9%E8%B1%A1%E6%A0%91.jpg" alt="Qt对象树"></p><p>当创建的对象在堆区中时，如果指定的父亲是QObject派生下来的类或者QObject子类派生下来的类，对象会被放入到对象树中，这样就可以不用管理释放的操作，一定程度上简化了内存回收机制。</p><h4><span id="5-qt中的坐标系统">5. Qt中的坐标系统</span></h4><p><img src="/Qt/Qt%E7%AA%97%E5%8F%A3%E5%9D%90%E6%A0%87%E7%B3%BB.jpg" alt="Qt窗口坐标系"></p><h4><span id="6-信号和槽的基本使用以及拓展">6. 信号和槽的基本使用以及拓展</span></h4><p><strong>connect( 信号的发送者, 发送的具体信号, 信号的接收者, 信号的处理(槽函数) )</strong></p><p>​                    sender                signal                receiver                slot</p><p><strong>断开连接使用disconnect，参数与connect一致</strong></p><p><strong>信号槽的优点：</strong>松散耦合，信号发送端和接收端本身没有关联，通过connect连接将二者耦合在一起</p><table><thead><tr><th align="center">自定义信号</th><th align="center">自定义槽函数</th></tr></thead><tbody><tr><td align="center">写到signals下</td><td align="center">写到public slot下，或者public，或者全局函数</td></tr><tr><td align="center">无返回值 void</td><td align="center">无返回值 void</td></tr><tr><td align="center">需要声明，不需要实现</td><td align="center">需要声明和实现</td></tr><tr><td align="center">可以有参数，可以重载</td><td align="center">可以有参数，可以重载</td></tr></tbody></table><p><strong>触发自定义的信号：</strong>emit  自定义的信号</p><p><strong>当自定义信号和槽出现重载：</strong></p><ul><li>需要利用函数指针明确指向函数的地址（类似于委托）</li><li>QString 转成 char *：<ol><li>.toUtf8() 转为 QByteArray</li><li>.data() 转为 char *</li></ol></li></ul><p><strong>拓展：</strong></p><ul><li>信号可以连接信号</li><li>一个信号可以连接多个槽函数</li><li>多个信号可以连接同一个槽函数</li><li>信号和槽函数的参数类型必须一致</li><li>信号的参数个数≥槽函数的参数个数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Qt4版本以前的信号和槽连接方式</span></span><br><span class="line">connect(teacher,SIGNAL(hungry()),student,SLOT(treat()));</span><br><span class="line"><span class="comment">//优点：参数直观，写法简便。  缺点：参数类型不做检测</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Qt4版本之后的信号和槽连接方式</span></span><br><span class="line"><span class="keyword">void</span> (Teacher::*teacherSignal) (<span class="keyword">void</span>) = &amp;Teacher::hungry;</span><br><span class="line"><span class="keyword">void</span> (Student::*studentSlot) (<span class="keyword">void</span>) = &amp;Student::treat;</span><br><span class="line">connect(teacher,teacherSignal,student,studentSlot);</span><br></pre></td></tr></table></figure><p>槽函数可以使用<strong>Lambda表达式  [](){}</strong></p><p>​    []标识符  =值传递  &amp;引用传递</p><p>​    ()参数</p><p>​    {}函数体</p><p>​    mutable 修饰值传递变量，可以修改拷贝出的数据，改变不了本体</p><p>​    若有返回值 []()-&gt;int{}</p><p><img src="/Qt/Qt%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD.png" alt="Qt信号和槽"></p><h3><span id="第二章">第二章</span></h3><h4><span id="1-带菜单栏的窗口qmainwindow">1. 带菜单栏的窗口QMainWindow</span></h4><p> QMainWindow是一个为用户提供主窗口程序的类，包含一个菜单栏（menu bar）、多个工具栏（tool bars）、多个锚接部件（dock widgets 浮动窗口）、一个状态栏（status bar）及一个中心部件（central widget），是许多应用程序的基础，如文本编辑器，图片编辑器等。</p><p><img src="/Qt/QMainWindow.png" alt="QMainWindow"></p><p><strong>菜单栏：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*菜单栏  最多只能有一个*/</span></span><br><span class="line"><span class="comment">/* **************************************** */</span></span><br><span class="line"><span class="comment">//菜单栏创建</span></span><br><span class="line">QMenuBar * menu = menuBar();</span><br><span class="line"><span class="comment">//将菜单栏放入到窗口中</span></span><br><span class="line">setMenuBar(menu);</span><br><span class="line"><span class="comment">//创建菜单</span></span><br><span class="line">QMenu * fileMenu = menu-&gt;addMenu(<span class="string">"File"</span>);</span><br><span class="line"><span class="comment">//QMenu * editMenu = bar-&gt;addMenu("Edit");</span></span><br><span class="line"><span class="comment">//创建菜单项</span></span><br><span class="line">fileMenu-&gt;addAction(<span class="string">"New Scene"</span>);</span><br><span class="line">fileMenu-&gt;addAction(<span class="string">"Open Scene"</span>);</span><br><span class="line"><span class="comment">//添加分割线</span></span><br><span class="line">fileMenu-&gt;addSeparator();</span><br><span class="line">fileMenu-&gt;addAction(<span class="string">"Save Scene"</span>);</span><br><span class="line"><span class="comment">/* **************************************** */</span></span><br></pre></td></tr></table></figure><p><strong>工具栏：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*工具栏 可以创建多个*/</span></span><br><span class="line">   <span class="comment">/* **************************************** */</span></span><br><span class="line">   <span class="comment">//工具栏创建</span></span><br><span class="line">   QToolBar * toolBar = <span class="keyword">new</span> QToolBar(<span class="keyword">this</span>);</span><br><span class="line">   <span class="comment">//设置工具栏默认停靠</span></span><br><span class="line">   addToolBar(Qt::LeftToolBarArea,toolBar);</span><br><span class="line">   <span class="comment">//设置工具栏只允许左右停靠</span></span><br><span class="line">   toolBar-&gt;setAllowedAreas(Qt::LeftToolBarArea|Qt::RightToolBarArea);</span><br><span class="line">   <span class="comment">//设置浮动操作</span></span><br><span class="line">   toolBar-&gt;setFloatable(<span class="literal">false</span>);</span><br><span class="line">   <span class="comment">//设置移动:总开关，设置为false后浮动与停靠的设置均无意义</span></span><br><span class="line">   toolBar-&gt;setMovable(<span class="literal">false</span>);</span><br><span class="line">   <span class="comment">//设置工具栏内容（与菜单栏一样）</span></span><br><span class="line">   <span class="comment">//在工具栏中添加控件</span></span><br><span class="line">   QPushButton * btn = <span class="keyword">new</span> QPushButton(<span class="string">"btn"</span>,<span class="keyword">this</span>);</span><br><span class="line">   toolBar-&gt;addWidget(btn);</span><br><span class="line">   <span class="comment">/* **************************************** */</span></span><br></pre></td></tr></table></figure><p><strong>状态栏：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*状态栏 最多只能有一个*/</span></span><br><span class="line"><span class="comment">/* **************************************** */</span></span><br><span class="line"><span class="comment">//状态栏创建</span></span><br><span class="line">QStatusBar * status = statusBar();</span><br><span class="line"><span class="comment">//将状态栏放入到窗口中</span></span><br><span class="line">setStatusBar(status);</span><br><span class="line"><span class="comment">//放标签控件</span></span><br><span class="line">QLabel * label = <span class="keyword">new</span> QLabel(<span class="string">"Console"</span>,<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//status-&gt;addWidget(label);</span></span><br><span class="line"><span class="comment">//右侧</span></span><br><span class="line">status-&gt;addPermanentWidget(label);</span><br><span class="line"><span class="comment">/* **************************************** */</span></span><br></pre></td></tr></table></figure><p><strong>锚接部件（浮动窗口）：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*锚接部件（浮动窗口） 可以创建多个*/</span></span><br><span class="line"><span class="comment">/* **************************************** */</span></span><br><span class="line"><span class="comment">//浮动窗口创建</span></span><br><span class="line">QDockWidget * dockWidget = <span class="keyword">new</span> QDockWidget(<span class="string">"Light"</span>,<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//设置浮动窗口默认停靠</span></span><br><span class="line">addDockWidget(Qt::BottomDockWidgetArea,dockWidget);</span><br><span class="line"><span class="comment">//设置浮动窗口只能上下停靠</span></span><br><span class="line">dockWidget-&gt;setAllowedAreas(Qt::BottomDockWidgetArea|Qt::TopDockWidgetArea);</span><br><span class="line"><span class="comment">/* **************************************** */</span></span><br></pre></td></tr></table></figure><p><strong>中心部分：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*中心部分 最多只能有一个*/</span></span><br><span class="line"><span class="comment">/* **************************************** */</span></span><br><span class="line">QTextEdit * text = <span class="keyword">new</span> QTextEdit(<span class="keyword">this</span>);</span><br><span class="line">setCentralWidget(text);</span><br><span class="line"><span class="comment">/* **************************************** */</span></span><br></pre></td></tr></table></figure><h4><span id="2-资源文件">2. 资源文件</span></h4><ul><li>将图片文件 拷贝到项目位置下</li><li>右键项目-&gt;添加新文件-&gt;Qt-&gt;Qt recourse File-&gt;给资源命名res-&gt;生成res.qrc文件</li><li>右键res.qrc文件-&gt;Open in Editor 编辑资源-&gt;添加前缀-&gt;添加资源文件</li><li>使用  “: + 前缀名 + 文件名”</li></ul><h4><span id="3-对话框">3. 对话框</span></h4><p><strong>分类：</strong></p><p>​    模态对话框：不可以对其他窗口进行操作；（阻塞）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模态对话框 阻塞</span></span><br><span class="line"><span class="function">QDialog <span class="title">dlg</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">dlg.resize(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">dlg.exec();<span class="comment">//阻塞其他窗口</span></span><br><span class="line">qDebug()&lt;&lt;<span class="string">"模态对话框弹出"</span>;</span><br></pre></td></tr></table></figure><p>​    非模态对话框：可以对其他窗口进行操作；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非模态对话框</span></span><br><span class="line">QDialog * dlg = <span class="keyword">new</span> QDialog(<span class="keyword">this</span>);<span class="comment">//防止一闪而过，创建到堆区</span></span><br><span class="line">dlg-&gt;resize(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">dlg-&gt;show();</span><br><span class="line">dlg-&gt;setAttribute(Qt::WA_DeleteOnClose);<span class="comment">//窗口关闭时释放资源</span></span><br><span class="line">qDebug()&lt;&lt;<span class="string">"非模态对话框弹出"</span>;</span><br></pre></td></tr></table></figure><p><strong>标准对话框：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息对话框 QMessageBox                                     </span></span><br><span class="line">                                                        </span><br><span class="line"><span class="comment">//错误对话框                                                 </span></span><br><span class="line"><span class="comment">//警告对话框                                                 </span></span><br><span class="line"><span class="comment">//信息对话框                                                 </span></span><br><span class="line"><span class="comment">//提问对话框                                                 </span></span><br><span class="line"><span class="comment">//返回值 StandardButton类型</span></span><br><span class="line"><span class="comment">//参数1 父窗口  参数2 标题  参数3 内容  参数4 按键类型(StandardButton类型)  参数5 默认按键</span></span><br></pre></td></tr></table></figure><p>QColorDialog：选择颜色</p><p>QFileDialog：选择文件或目录</p><p>QFontDialog：选择字体</p><p>QInputDialog：允许用户输入一个值，并将其返回</p><p>QPageSetupDialog：为打印机提供纸张相关的选项</p><p>QPrintDialog：打印机配置</p><p>QPrintPreviewDialog：打印预览</p><p>QProgressDialog：显示操作过程</p><h4><span id="4-界面布局">4. 界面布局</span></h4><p>Vertical Layout：垂直布局</p><p>Horizontal Layout：水平布局</p><p>Grid Layout：栅格布局</p><p>Form Layout：在窗体布局中布局</p><h4><span id="5-常用控件">5. 常用控件</span></h4><p><strong>按钮组：</strong></p><p>PushButton  常用按钮</p><p>ToolButton  工具按钮，用于显示图片，也可显示文字。如想显示文字，修改风格toolButtonStyle；</p><p>​                         凸起风格autoRaise</p><p>Radio Button  单选按钮，设置默认setChecked</p><p>Check Box  多选按钮，stateChanged，2是选中，1是半选(在属性栏中勾选tristate)，0是未选</p><p><strong>QListWidget 列表容器：</strong></p><p>QListWidgetItem *item    一行内容</p><p>ListWidget-&gt;addItem(item)    将内容添加到ListWidget中</p><p>item-&gt;setTextAlignment(Qt::AlignHCenter)    设置水平居中</p><p><strong>TreeWidget 树容器：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//treeWidget树控件使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置水平头</span></span><br><span class="line">ui-&gt;treeWidget-&gt;setHeaderLabels(QStringList()&lt;&lt;<span class="string">"英雄"</span>&lt;&lt;<span class="string">"英雄介绍"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载顶层结点</span></span><br><span class="line">QTreeWidgetItem * item1 =</span><br><span class="line">        <span class="keyword">new</span> QTreeWidgetItem(ui-&gt;treeWidget,QStringList()&lt;&lt;<span class="string">"力量"</span>);</span><br><span class="line">QTreeWidgetItem * item2 =</span><br><span class="line">        <span class="keyword">new</span> QTreeWidgetItem(ui-&gt;treeWidget,QStringList()&lt;&lt;<span class="string">"敏捷"</span>);</span><br><span class="line">QTreeWidgetItem * item3 =</span><br><span class="line">        <span class="keyword">new</span> QTreeWidgetItem(QStringList()&lt;&lt;<span class="string">"智力"</span>);</span><br><span class="line">ui-&gt;treeWidget-&gt;addTopLevelItem(item3);</span><br><span class="line"><span class="comment">//追加子节点</span></span><br><span class="line">QTreeWidgetItem * li1 =</span><br><span class="line">        <span class="keyword">new</span> QTreeWidgetItem(item1,QStringList()&lt;&lt;<span class="string">"钢背兽"</span>&lt;&lt;<span class="string">"力量英雄"</span>);</span><br><span class="line">QTreeWidgetItem * li2 =</span><br><span class="line">        <span class="keyword">new</span> QTreeWidgetItem(QStringList()&lt;&lt;<span class="string">"船长"</span>&lt;&lt;<span class="string">"力量英雄"</span>);</span><br><span class="line">item1-&gt;addChild(li2);</span><br></pre></td></tr></table></figure><p><strong>TableWidget 表格容器：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tableWidget表格控件使用</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//设置列数</span></span><br><span class="line">   ui-&gt;tableWidget-&gt;setColumnCount(<span class="number">3</span>);</span><br><span class="line">   <span class="comment">//设置水平表头</span></span><br><span class="line">   ui-&gt;tableWidget-&gt;setHorizontalHeaderLabels(QStringList()&lt;&lt;<span class="string">"姓名"</span>&lt;&lt;<span class="string">"性别"</span>&lt;&lt;<span class="string">"年龄"</span>);</span><br><span class="line">   <span class="comment">//设置行数</span></span><br><span class="line">   ui-&gt;tableWidget-&gt;setRowCount(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//设置正文</span></span><br><span class="line">   QStringList nameList;</span><br><span class="line">   nameList&lt;&lt;<span class="string">"亚瑟"</span>&lt;&lt;<span class="string">"妲己"</span>&lt;&lt;<span class="string">"赵云"</span>&lt;&lt;<span class="string">"花木兰"</span>&lt;&lt;<span class="string">"张飞"</span>;</span><br><span class="line">   QList&lt;QString&gt; sexList;</span><br><span class="line">   sexList&lt;&lt;<span class="string">"男"</span>&lt;&lt;<span class="string">"女"</span>&lt;&lt;<span class="string">"男"</span>&lt;&lt;<span class="string">"女"</span>&lt;&lt;<span class="string">"男"</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;ui-&gt;tableWidget-&gt;rowCount();i++) &#123;</span><br><span class="line">       <span class="keyword">int</span> col = <span class="number">0</span>;</span><br><span class="line">       ui-&gt;tableWidget-&gt;setItem(i,col++,<span class="keyword">new</span> QTableWidgetItem(nameList.at(i)));</span><br><span class="line">       ui-&gt;tableWidget-&gt;setItem(i,col++,<span class="keyword">new</span> QTableWidgetItem(sexList[i]));</span><br><span class="line">       <span class="comment">//int -&gt; QString</span></span><br><span class="line">       ui-&gt;tableWidget-&gt;setItem(i,col++,<span class="keyword">new</span> QTableWidgetItem(QString::number(i+<span class="number">18</span>)));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>其他控件：</strong></p><h4><span id="6-自定义控件">6. 自定义控件</span></h4><p>添加新文件 -&gt; Qt -&gt; 设计师界面类</p><p>Widget中使用自定义控件，拖拽一个Widget，右键点击提升为，添加类名，点击添加，点击提升</p><h3><span id="第三章">第三章</span></h3><h4><span id="1-事件处理">1. 事件处理</span></h4><p><strong>鼠标事件：</strong></p><ul><li>进入事件    enterEvent</li><li>离开事件    leaveEvent</li><li>按下事件    mousePressEvent</li><li>释放事件    mouseReleaseEvent</li><li>移动事件    mouseMoveEvent<ul><li>ev-&gt;button()判断所有按键</li><li>ev-&gt;buttons()判断组合按键    判断move时候的左右键    结合&amp;操作符</li></ul></li><li>字符串格式化    QString(“移动 x=<font color="red">%1</font> y=<font color="red">%2</font>“).arg(ev-&gt;x()).arg(ev-&gt;y())</li><li>设置鼠标追踪    setMouseTracking(true)使鼠标不需点击即可追踪移动事件</li></ul><h4><span id="2-定时器">2. 定时器</span></h4><ul><li><p>利用事件 void timerEvent(QTimerEvent *ev)</p><p>启动定时器 startTimer(1000)毫秒单位</p><p>startTimer的返回值是定时器的唯一标识，可以和ev-&gt;timerId作比较实现不同的定时器</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTimer&gt;</span></span></span><br><span class="line"><span class="comment">//定时器第二种使用方式</span></span><br><span class="line">   QTimer * timer = <span class="keyword">new</span> QTimer(<span class="keyword">this</span>);</span><br><span class="line">   <span class="comment">//启动定时器</span></span><br><span class="line">   timer-&gt;start(<span class="number">500</span>);</span><br><span class="line">   connect(timer,&amp;QTimer::timeout,[=]()&#123;</span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">       ui-&gt;timerTest-&gt;setText(QString::number(num++));</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="comment">//点击按钮暂停定时器</span></span><br><span class="line">   connect(ui-&gt;btn,&amp;QPushButton::clicked,timer,&amp;QTimer::stop);</span><br><span class="line"><span class="comment">//再次启动再调用start即可</span></span><br></pre></td></tr></table></figure></li></ul><h4><span id="3-event事件分发器">3. Event事件分发器</span></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回值bool类型：若为true，代表用户要处理这个事件，不向下分发事件</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MyLable::event</span><span class="params">(QEvent *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果是鼠标按下，在event事件分发中做拦截操作</span></span><br><span class="line">    <span class="keyword">if</span>(e-&gt;type() == QEvent::MouseButtonPress)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//转换类型</span></span><br><span class="line">        QMouseEvent * ev = <span class="keyword">static_cast</span>&lt;QMouseEvent *&gt;(e);</span><br><span class="line">        qDebug()&lt;&lt;QString(<span class="string">"event按下 x=%1 y=%2"</span>).arg(ev-&gt;x()).arg(ev-&gt;y());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他事件  交给父类处理  默认处理</span></span><br><span class="line">    <span class="keyword">return</span> QLabel::event(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="4-事件过滤器">4. 事件过滤器</span></h4><p>在程序将事件分发到事件分发器前，可以利用过滤器做拦截</p><ol><li>给控件安装事件过滤器</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.安装事件过滤器</span></span><br><span class="line">ui-&gt;label-&gt;installEventFilter(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>重写eventFilter函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.重写事件过滤器的函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Widget::eventFilter</span><span class="params">(QObject * obj,QEvent * e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj == ui-&gt;label&amp;&amp;e-&gt;type()==QEvent::MouseButtonPress)</span><br><span class="line">    &#123;</span><br><span class="line">        QMouseEvent * ev = <span class="keyword">static_cast</span>&lt;QMouseEvent *&gt;(e);</span><br><span class="line">        qDebug()&lt;&lt;QString(<span class="string">"eventFilter按下 x=%1 y=%2"</span>).arg(ev-&gt;x()).arg(ev-&gt;y());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他默认处理</span></span><br><span class="line">    <span class="keyword">return</span> QWidget::eventFilter(obj,e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="5-qpainter绘图">5. QPainter绘图</span></h4><p>QPainter用来执行绘制的操作；QPaintDevice是一个二维空间的抽象，这个二维空间可以由QPainter在上面进行绘制；QPaintEngine提供了画笔painter在不同的设备上进行绘制的统一的接口。</p><p><img src="/Qt/Qt%E7%BB%98%E5%9B%BE%E6%B5%81%E7%A8%8B.jpg" alt="Qt绘图流程"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent * ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//实例化画家对象  指定绘图设备(画布)</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画笔属性</span></span><br><span class="line">    <span class="comment">//颜色</span></span><br><span class="line">    <span class="function">QPen <span class="title">pen</span><span class="params">(QColor(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>))</span></span>;</span><br><span class="line">    <span class="comment">//设置画笔的风格、粗细</span></span><br><span class="line">    <span class="comment">//pen.setStyle()</span></span><br><span class="line">    <span class="comment">//pen.setWidth()</span></span><br><span class="line">    <span class="comment">//画家使用画笔</span></span><br><span class="line">    painter.setPen(pen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置画刷(填充)</span></span><br><span class="line">    <span class="function">QBrush <span class="title">brush</span><span class="params">(Qt::cyan)</span></span>;</span><br><span class="line">    <span class="comment">//设置画刷风格</span></span><br><span class="line">    <span class="comment">//brush.setStyle()</span></span><br><span class="line">    <span class="comment">//让画家使用画刷</span></span><br><span class="line">    painter.setBrush(brush);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画线</span></span><br><span class="line">    painter.drawLine(QPoint(<span class="number">0</span>,<span class="number">0</span>),QPoint(<span class="number">100</span>,<span class="number">100</span>));</span><br><span class="line">    <span class="comment">//画圆(椭圆)</span></span><br><span class="line">    painter.drawEllipse(QPoint(<span class="number">100</span>,<span class="number">100</span>),<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">    <span class="comment">//画矩形</span></span><br><span class="line">    painter.drawRect(<span class="number">20</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">    <span class="comment">//写字</span></span><br><span class="line">    painter.drawText(QRect(<span class="number">150</span>,<span class="number">20</span>,<span class="number">120</span>,<span class="number">60</span>),<span class="string">"好好学习，天天向上"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//////////高级设置//////////</span></span><br><span class="line"><span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">painter.drawEllipse(QPoint(<span class="number">100</span>,<span class="number">100</span>),<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"><span class="comment">//设置  抗锯齿  效率较低</span></span><br><span class="line">painter.setRenderHint(QPainter::Antialiasing,<span class="literal">true</span>);</span><br><span class="line">painter.drawEllipse(QPoint(<span class="number">200</span>,<span class="number">100</span>),<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//画矩形</span></span><br><span class="line">painter.drawRect(QRect(<span class="number">20</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">50</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//移动画家位置</span></span><br><span class="line">painter.translate(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//保存画家状态</span></span><br><span class="line">painter.save();</span><br><span class="line">painter.drawRect(QRect(<span class="number">20</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">painter.translate(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//还原画家状态</span></span><br><span class="line">painter.restore();</span><br><span class="line">painter.drawRect(QRect(<span class="number">20</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">50</span>));</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//////////利用画家画资源图片//////////</span></span><br><span class="line">   <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">   painter.drawPixmap(<span class="number">0</span>,<span class="number">0</span>,QPixmap(<span class="string">":/wechat.png"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新调用paintEvent使用update()</span></span><br></pre></td></tr></table></figure><h4><span id="6-绘图设备qpaintdevice的使用">6. 绘图设备(QPaintDevice)的使用</span></h4><p><strong>QPixmap:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Pixmap绘图设备  专门为平台做了显示的优化</span></span><br><span class="line"><span class="function">QPixmap <span class="title">pix</span><span class="params">(<span class="number">300</span>,<span class="number">300</span>)</span></span>;</span><br><span class="line"><span class="comment">//填充背景</span></span><br><span class="line">pix.fill(Qt::white);</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明画家</span></span><br><span class="line"><span class="function">QPainter <span class="title">painter</span><span class="params">(&amp;pix)</span></span>;</span><br><span class="line">painter.setPen(QPen(Qt::green));</span><br><span class="line">painter.drawEllipse(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存</span></span><br><span class="line">pix.save(<span class="string">"D:/pix.png"</span>);</span><br></pre></td></tr></table></figure><p><strong>QImage:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QImage绘图设备  可以对像素进行访问</span></span><br><span class="line"><span class="function">QImage <span class="title">image</span><span class="params">(<span class="number">300</span>,<span class="number">300</span>,QImage::Format_RGB32)</span></span>;</span><br><span class="line"><span class="comment">//填充背景</span></span><br><span class="line">image.fill(Qt::white);</span><br><span class="line"><span class="comment">//对像素进行操作</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>;i &lt; <span class="number">60</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">30</span>;j &lt; <span class="number">60</span>;j++) &#123;</span><br><span class="line">        image.setPixel(i,j,qRgb(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明画家</span></span><br><span class="line"><span class="function">QPainter <span class="title">painter</span><span class="params">(&amp;image)</span></span>;</span><br><span class="line">painter.setPen(QPen(Qt::green));</span><br><span class="line">painter.drawEllipse(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存</span></span><br><span class="line">image.save(<span class="string">"D:/img.png"</span>);</span><br></pre></td></tr></table></figure><p><strong>QPicture:</strong></p><p>保存：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QPicture绘图设备  可以记录和重现绘图指令</span></span><br><span class="line">QPicture pic;</span><br><span class="line">QPainter painter;</span><br><span class="line">painter.begin(&amp;pic);<span class="comment">//开始画图</span></span><br><span class="line">painter.setPen(QPen(Qt::cyan));</span><br><span class="line">painter.drawEllipse(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">painter.end();<span class="comment">//结束画图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//保存</span></span><br><span class="line">pic.save(<span class="string">"D:/pic.yhc"</span>);</span><br></pre></td></tr></table></figure><p>重现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Widget::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//重现</span></span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    QPicture pic;</span><br><span class="line">    pic.load(<span class="string">"D:/pic.yhc"</span>);</span><br><span class="line">    painter.drawPicture(<span class="number">0</span>,<span class="number">0</span>,pic);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="7-qfile文件读写操作">7. Qfile文件读写操作</span></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//点击选取文件按钮，弹出文件对话框</span></span><br><span class="line">    connect(ui-&gt;btn,&amp;QPushButton::clicked,[=]()&#123;</span><br><span class="line">        QString path = QFileDialog::getOpenFileName(<span class="keyword">this</span>,<span class="string">"OpenFile"</span>,<span class="string">"C:\\Users\\yhccc\\Desktop"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将路径放入lineEdit中</span></span><br><span class="line">        ui-&gt;path-&gt;setText(path);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//编码格式类(读取非utf-8文件时做一个转换)</span></span><br><span class="line">        QTextCodec * codec = QTextCodec::codecForName(<span class="string">"GB2312"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将txt的内容放入textEdit中</span></span><br><span class="line">        <span class="comment">//QFile默认支持格式是utf-8</span></span><br><span class="line"><span class="comment">//读</span></span><br><span class="line">        QFile file(path);<span class="comment">//参数是读取文件的路径</span></span><br><span class="line">        file.open(QIODevice::ReadOnly);<span class="comment">//以只读的方式打开文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//QByteArray array = file.readAll();</span></span><br><span class="line">        QByteArray <span class="built_in">array</span>;</span><br><span class="line">        <span class="keyword">while</span>(!file.atEnd())<span class="comment">//是否读到文件尾</span></span><br><span class="line">             <span class="built_in">array</span> += file.readLine();<span class="comment">//按行读</span></span><br><span class="line">        ui-&gt;content-&gt;setText(codec-&gt;toUnicode(<span class="built_in">array</span>));</span><br><span class="line"></span><br><span class="line">        file.close();</span><br><span class="line"><span class="comment">//写</span></span><br><span class="line">        <span class="comment">//进行写入操作</span></span><br><span class="line">        file.open(QIODevice::Append);<span class="comment">//用追加的方式写</span></span><br><span class="line"></span><br><span class="line">        file.write(<span class="string">"\narray"</span>);</span><br><span class="line">        file.close();</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>QFileInfo文件信息类读取文件信息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//QFileInfo  文件信息类</span></span><br><span class="line"><span class="function">QFileInfo <span class="title">info</span><span class="params">(path)</span></span>;</span><br><span class="line"></span><br><span class="line">info.size();<span class="comment">//文件大小</span></span><br><span class="line">info.suffix();<span class="comment">//后缀名</span></span><br><span class="line">info.fileName();<span class="comment">//文件名</span></span><br><span class="line">info.filePath();<span class="comment">//文件路径</span></span><br><span class="line">qDebug()&lt;&lt;info.birthTime().toString(<span class="string">"yyyy/MM/dd hh:mm:ss"</span>);<span class="comment">//创建日期</span></span><br><span class="line">qDebug()&lt;&lt;info.lastModified().toString(<span class="string">"yyyy/MM/dd hh:mm:ss"</span>);<span class="comment">//最后修改日期</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Qt&quot;&gt;&lt;a href=&quot;#Qt&quot; class=&quot;headerlink&quot; title=&quot;Qt&quot;&gt;&lt;/a&gt;Qt&lt;/h2&gt;&lt;h3 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h3&gt;&lt;h4 id=&quot;1-Qt的介绍、优点、成功案例&quot;&gt;&lt;a href=&quot;#1-Qt的介绍、优点、成功案例&quot; class=&quot;headerlink&quot; title=&quot;1. Qt的介绍、优点、成功案例&quot;&gt;&lt;/a&gt;1. Qt的介绍、优点、成功案例&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;介绍：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Qt是一个&lt;font color=&quot;red&quot;&gt;跨平台&lt;/font&gt;的C++&lt;font color=&quot;red&quot;&gt;图形用户界面应用程序框架&lt;/font&gt;。它为应用程序开发者提供建立艺术级图形界面所需的所有功能。它是完全面向对象的，很容易扩展，并且允许真正的组件编程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>String2Toast</title>
    <link href="http://yoursite.com/2019/08/04/String2Toast/"/>
    <id>http://yoursite.com/2019/08/04/String2Toast/</id>
    <published>2019-08-04T06:23:00.000Z</published>
    <updated>2020-10-27T04:57:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>实现两个脚本：</p><ol><li><strong>扩展</strong>string类型，实现StringToToast脚本</li><li>Android端单击返回键Toast提示，双击退出应用脚本</li></ol><a id="more"></a><h4><span id="string-to-toast">String to Toast</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 扩展string类型</span><br><span class="line">/// Tool:Unity中string类型转成Android端的Toast</span><br><span class="line">/// 使用方法为string.ShowAsToast()</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public static class StringToToast &#123;</span><br><span class="line"></span><br><span class="line">#if UNITY_ANDROID</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// Show String as Toast.</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;text&quot;&gt;Text.&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;activity&quot;&gt;Activity.&lt;/param&gt;</span><br><span class="line">    public static void ShowAsToast(this string text, AndroidJavaObject activity = null)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(text);</span><br><span class="line">        if (activity == null)</span><br><span class="line">        &#123;</span><br><span class="line">            AndroidJavaClass UnityPlayer = new AndroidJavaClass(&quot;com.unity3d.player.UnityPlayer&quot;);</span><br><span class="line">            activity = UnityPlayer.GetStatic&lt;AndroidJavaObject&gt;(&quot;currentActivity&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        AndroidJavaClass Toast = new AndroidJavaClass(&quot;android.widget.Toast&quot;);</span><br><span class="line">        AndroidJavaObject context = activity.Call&lt;AndroidJavaObject&gt;(&quot;getApplicationContext&quot;);</span><br><span class="line">        activity.Call(&quot;runOnUiThread&quot;, new AndroidJavaRunnable(() =&gt; &#123;</span><br><span class="line">            AndroidJavaObject javaString = new AndroidJavaObject(&quot;java.lang.String&quot;, text);</span><br><span class="line">            Toast.CallStatic&lt;AndroidJavaObject&gt;(&quot;makeText&quot;, context, javaString, Toast.GetStatic&lt;int&gt;(&quot;LENGTH_SHORT&quot;)).Call(&quot;show&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">    public static AndroidJavaObject toJavaString(this string CSharpString)</span><br><span class="line">    &#123;</span><br><span class="line">        return new AndroidJavaObject(&quot;java.lang.String&quot;, CSharpString);</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="应用android端单击返回键toast提示双击退出应用">应用：Android端单击返回键Toast提示，双击退出应用</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 退出应用脚本</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class Quit : MonoBehaviour &#123;</span><br><span class="line">    private bool IsTiming;  //是否开始计时</span><br><span class="line">    private float CountDown; //倒计时</span><br><span class="line"></span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        EixtDetection(); //调用 退出检测函数</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 退出检测</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    private void EixtDetection()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Input.GetKeyDown(KeyCode.Escape))//如果按下退出键</span><br><span class="line">        &#123;</span><br><span class="line">            if (CountDown == 0)//当倒计时时间等于0的时候</span><br><span class="line">            &#123;</span><br><span class="line">                CountDown = Time.time;//把游戏开始时间，赋值给 CountDown</span><br><span class="line">                IsTiming = true;//开始计时</span><br><span class="line">                string noticeMsg = &quot;再次点击退出游戏&quot;;//显示提示信息</span><br><span class="line">                noticeMsg.ShowAsToast();//将提示信息转为Android端的Toast</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                Application.Quit();//退出应用</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (IsTiming) //如果 IsTiming 为 true </span><br><span class="line">        &#123;</span><br><span class="line">            if ((Time.time - CountDown) &gt; 3.0f)//如果 两次点击时间间隔大于3秒</span><br><span class="line">            &#123;</span><br><span class="line">                CountDown = 0;//倒计时时间归零</span><br><span class="line">                IsTiming = false;//关闭倒计时</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实现两个脚本：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;扩展&lt;/strong&gt;string类型，实现StringToToast脚本&lt;/li&gt;
&lt;li&gt;Android端单击返回键Toast提示，双击退出应用脚本&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vuforia(1)</title>
    <link href="http://yoursite.com/2019/08/02/Vuforia(1)/"/>
    <id>http://yoursite.com/2019/08/02/Vuforia(1)/</id>
    <published>2019-08-02T03:12:01.000Z</published>
    <updated>2019-10-16T02:55:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="vuforia-ar-使用指南">Vuforia AR 使用指南</span></h2><h4><span id="一-新建unity工程">一、新建Unity工程</span></h4><p>新建Unity工程，需要记录下项目名称，如下图所示：</p><p><img src="/Vuforia(1)/1.png" alt="新建工程"></p><a id="more"></a><h4><span id="二-导入arcamera">二、导入ARCamera</span></h4><p>选中左上角的GameObject-&gt;Vuforia-&gt;ARCamera，选择Import：</p><p><img src="/Vuforia(1)/2.png" alt="导入Vuforia"></p><p>导入Vuforia资源后即可创建ARCamera的游戏物体。</p><p><strong>Tip：如果GameObject中没有Vuforia选项，则是安装时没有选择一起安装，重新打开安装包，安装时勾选Vuforia即可。</strong></p><h4><span id="三-vuforia设置">三、Vuforia设置</span></h4><p><img src="/Vuforia(1)/3.png" alt="Vuforia不可用"></p><p>选中ARCamera可以在Inspector面板中看到Vuforia Behaviour的脚本是不可用的，需要在左上角</p><p>File-&gt;Build Settings-&gt;Player Settings-&gt;XR Settings中勾选Vuforia Augmented Reality Support</p><p>在勾选之前先要选择输出的平台。<em>（如果更改平台，请重新查看是勾选Vuforia Augmented Reality Support，若没有勾选可能发布失败）</em></p><p>若发布为Android平台，需要把Other Settings中的Android TV Compatibility的勾选取消掉，Vuforia不支持Android TV。</p><h4><span id="四-获取license-key">四、获取License Key</span></h4><p>点击Vuforia Behaviour脚本的Open Vuforia configuration，添加App License Key。</p><ol><li>打开Vuforia官网<a href="https://developer.vuforia.com/" target="_blank" rel="noopener">https://developer.vuforia.com/</a></li><li>登陆后，点击Develop，跳转页面后在License Manager中点击Get Development Key<br><img src="/Vuforia(1)/4.png" alt="获取LicenseKey"></li><li>获取成功，之后点进创建的License Key，即可复制使用</li><li>将复制的License Key粘贴到工程中App License Key中</li></ol><h4><span id="五-创建数据库">五、创建数据库</span></h4><ol><li>在Develop中选择Target Manager，点击Add Database，创建一个Database，或直接在之前的Database中添加Target</li><li>下载Database并导入Unity中，即可使用</li></ol><h4><span id="六-实现ar效果">六、实现AR效果</span></h4><p>在场景中选择GameObject-&gt;Vuforia-&gt;Image，在其Image Target Behaviour脚本中选择Database和Image Target</p><p><img src="/Vuforia(1)/5.png" alt="选择Image Target"></p><p>将要渲染的三维物体作为子物体放在ImageTarget下即可实现AR效果。</p><p>手机扫描到Image Target图片时，即可生成三维模型。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vuforia-AR-使用指南&quot;&gt;&lt;a href=&quot;#Vuforia-AR-使用指南&quot; class=&quot;headerlink&quot; title=&quot;Vuforia AR 使用指南&quot;&gt;&lt;/a&gt;Vuforia AR 使用指南&lt;/h2&gt;&lt;h4 id=&quot;一、新建Unity工程&quot;&gt;&lt;a href=&quot;#一、新建Unity工程&quot; class=&quot;headerlink&quot; title=&quot;一、新建Unity工程&quot;&gt;&lt;/a&gt;一、新建Unity工程&lt;/h4&gt;&lt;p&gt;新建Unity工程，需要记录下项目名称，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Vuforia(1)/1.png&quot; alt=&quot;新建工程&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
